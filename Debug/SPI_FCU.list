
SPI_FCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002914  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002a9c  08002a9c  00012a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002b0c  08002b0c  00012b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002b14  08002b14  00012b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002b18  08002b18  00012b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08002b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001dc  20000004  08002b20  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001e0  08002b20  000201e0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014bc2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002745  00000000  00000000  00034bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006400  00000000  00000000  0003733b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000998  00000000  00000000  0003d740  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bd0  00000000  00000000  0003e0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000056d6  00000000  00000000  0003eca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003b81  00000000  00000000  0004437e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00047eff  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000019e0  00000000  00000000  00047f7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a84 	.word	0x08002a84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002a84 	.word	0x08002a84

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <HAL_InitTick+0x24>)
{
 80004ec:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004ee:	6818      	ldr	r0, [r3, #0]
 80004f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f8:	f000 f88a 	bl	8000610 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80004fc:	2200      	movs	r2, #0
 80004fe:	4621      	mov	r1, r4
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f844 	bl	8000590 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000508:	2000      	movs	r0, #0
 800050a:	bd10      	pop	{r4, pc}
 800050c:	20000000 	.word	0x20000000

08000510 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <HAL_Init+0x20>)
{
 8000512:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	6813      	ldr	r3, [r2, #0]
 8000516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800051a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f825 	bl	800056c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff ffe0 	bl	80004e8 <HAL_InitTick>
  HAL_MspInit();
 8000528:	f002 f994 	bl	8002854 <HAL_MspInit>
}
 800052c:	2000      	movs	r0, #0
 800052e:	bd08      	pop	{r3, pc}
 8000530:	40022000 	.word	0x40022000

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000534:	4a02      	ldr	r2, [pc, #8]	; (8000540 <HAL_IncTick+0xc>)
 8000536:	6813      	ldr	r3, [r2, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000020 	.word	0x20000020

08000544 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000544:	4b01      	ldr	r3, [pc, #4]	; (800054c <HAL_GetTick+0x8>)
 8000546:	6818      	ldr	r0, [r3, #0]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000020 	.word	0x20000020

08000550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000550:	b538      	push	{r3, r4, r5, lr}
 8000552:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000554:	f7ff fff6 	bl	8000544 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000558:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800055a:	4605      	mov	r5, r0
  {
    wait++;
 800055c:	bf18      	it	ne
 800055e:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000560:	f7ff fff0 	bl	8000544 <HAL_GetTick>
 8000564:	1b40      	subs	r0, r0, r5
 8000566:	4284      	cmp	r4, r0
 8000568:	d8fa      	bhi.n	8000560 <HAL_Delay+0x10>
  {
  }
}
 800056a:	bd38      	pop	{r3, r4, r5, pc}

0800056c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800056e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000570:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000574:	041b      	lsls	r3, r3, #16
 8000576:	0c1b      	lsrs	r3, r3, #16
 8000578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800057c:	0200      	lsls	r0, r0, #8
 800057e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000582:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000586:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000588:	60d3      	str	r3, [r2, #12]
 800058a:	4770      	bx	lr
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000590:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	68dc      	ldr	r4, [r3, #12]
 8000596:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800059a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a0:	2b04      	cmp	r3, #4
 80005a2:	bf28      	it	cs
 80005a4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a8:	f04f 0501 	mov.w	r5, #1
 80005ac:	fa05 f303 	lsl.w	r3, r5, r3
 80005b0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b4:	bf8c      	ite	hi
 80005b6:	3c03      	subhi	r4, #3
 80005b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ba:	4019      	ands	r1, r3
 80005bc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005be:	fa05 f404 	lsl.w	r4, r5, r4
 80005c2:	3c01      	subs	r4, #1
 80005c4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c8:	ea42 0201 	orr.w	r2, r2, r1
 80005cc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	bfaf      	iteee	ge
 80005d2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	f000 000f 	andlt.w	r0, r0, #15
 80005da:	4b06      	ldrlt	r3, [pc, #24]	; (80005f4 <HAL_NVIC_SetPriority+0x64>)
 80005dc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005de:	bfa5      	ittet	ge
 80005e0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005e4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005ec:	bd30      	pop	{r4, r5, pc}
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00
 80005f4:	e000ed14 	.word	0xe000ed14

080005f8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005f8:	0942      	lsrs	r2, r0, #5
 80005fa:	2301      	movs	r3, #1
 80005fc:	f000 001f 	and.w	r0, r0, #31
 8000600:	fa03 f000 	lsl.w	r0, r3, r0
 8000604:	4b01      	ldr	r3, [pc, #4]	; (800060c <HAL_NVIC_EnableIRQ+0x14>)
 8000606:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800060a:	4770      	bx	lr
 800060c:	e000e100 	.word	0xe000e100

08000610 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000610:	3801      	subs	r0, #1
 8000612:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000616:	d20a      	bcs.n	800062e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	4a07      	ldr	r2, [pc, #28]	; (8000638 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800061c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	21f0      	movs	r1, #240	; 0xf0
 8000620:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000624:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000626:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800062e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000e010 	.word	0xe000e010
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800063e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000640:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000642:	bf0c      	ite	eq
 8000644:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000648:	f022 0204 	bicne.w	r2, r2, #4
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	4770      	bx	lr
 8000650:	e000e010 	.word	0xe000e010

08000654 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000654:	4770      	bx	lr

08000656 <HAL_SYSTICK_IRQHandler>:
{
 8000656:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000658:	f7ff fffc 	bl	8000654 <HAL_SYSTICK_Callback>
 800065c:	bd08      	pop	{r3, pc}

0800065e <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800065e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8000662:	2a02      	cmp	r2, #2
{
 8000664:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000666:	d003      	beq.n	8000670 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000668:	2204      	movs	r2, #4
 800066a:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 800066c:	2001      	movs	r0, #1
 800066e:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000670:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000672:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000674:	6811      	ldr	r1, [r2, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000676:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000678:	f021 010e 	bic.w	r1, r1, #14
 800067c:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800067e:	6811      	ldr	r1, [r2, #0]
 8000680:	f021 0101 	bic.w	r1, r1, #1
 8000684:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000686:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000688:	2101      	movs	r1, #1
 800068a:	fa01 f202 	lsl.w	r2, r1, r2
 800068e:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000690:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000692:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000696:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 800069a:	b113      	cbz	r3, 80006a2 <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 800069c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800069e:	4620      	mov	r0, r4
 80006a0:	bd10      	pop	{r4, pc}
 80006a2:	4618      	mov	r0, r3
    }
  }
  return status;
}
 80006a4:	bd10      	pop	{r4, pc}
	...

080006a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006ac:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006ae:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b0:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800085c <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80006b4:	4c67      	ldr	r4, [pc, #412]	; (8000854 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006b6:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 80006b8:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006ba:	9a01      	ldr	r2, [sp, #4]
 80006bc:	40da      	lsrs	r2, r3
 80006be:	d102      	bne.n	80006c6 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 80006c0:	b005      	add	sp, #20
 80006c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80006c6:	2601      	movs	r6, #1
    if(iocurrent)
 80006c8:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80006ca:	409e      	lsls	r6, r3
    if(iocurrent)
 80006cc:	ea12 0e06 	ands.w	lr, r2, r6
 80006d0:	f000 80b1 	beq.w	8000836 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006d4:	684a      	ldr	r2, [r1, #4]
 80006d6:	f022 0710 	bic.w	r7, r2, #16
 80006da:	2f02      	cmp	r7, #2
 80006dc:	d116      	bne.n	800070c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 80006de:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80006e2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80006e6:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80006ea:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80006ee:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80006f2:	f04f 0c0f 	mov.w	ip, #15
 80006f6:	fa0c fc0a 	lsl.w	ip, ip, sl
 80006fa:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80006fe:	690d      	ldr	r5, [r1, #16]
 8000700:	fa05 f50a 	lsl.w	r5, r5, sl
 8000704:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000708:	f8c9 5020 	str.w	r5, [r9, #32]
 800070c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000710:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000712:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000716:	fa05 f50c 	lsl.w	r5, r5, ip
 800071a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800071c:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000720:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000724:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000728:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800072a:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800072e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000730:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000734:	d811      	bhi.n	800075a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000736:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000738:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 800073c:	68cf      	ldr	r7, [r1, #12]
 800073e:	fa07 f70c 	lsl.w	r7, r7, ip
 8000742:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8000746:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000748:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800074a:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800074e:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8000752:	409f      	lsls	r7, r3
 8000754:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000758:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800075a:	f1ba 0f03 	cmp.w	sl, #3
 800075e:	d107      	bne.n	8000770 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000760:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000762:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000766:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 800076a:	409f      	lsls	r7, r3
 800076c:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 800076e:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000770:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000772:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000774:	688e      	ldr	r6, [r1, #8]
 8000776:	fa06 f60c 	lsl.w	r6, r6, ip
 800077a:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 800077c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800077e:	00d5      	lsls	r5, r2, #3
 8000780:	d559      	bpl.n	8000836 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000786:	f045 0501 	orr.w	r5, r5, #1
 800078a:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 800078e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000792:	f023 0603 	bic.w	r6, r3, #3
 8000796:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800079a:	f005 0501 	and.w	r5, r5, #1
 800079e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80007a2:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007a4:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a8:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80007aa:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007ac:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007b0:	270f      	movs	r7, #15
 80007b2:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80007b6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007ba:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80007be:	d03c      	beq.n	800083a <HAL_GPIO_Init+0x192>
 80007c0:	4d25      	ldr	r5, [pc, #148]	; (8000858 <HAL_GPIO_Init+0x1b0>)
 80007c2:	42a8      	cmp	r0, r5
 80007c4:	d03b      	beq.n	800083e <HAL_GPIO_Init+0x196>
 80007c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ca:	42a8      	cmp	r0, r5
 80007cc:	d039      	beq.n	8000842 <HAL_GPIO_Init+0x19a>
 80007ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007d2:	42a8      	cmp	r0, r5
 80007d4:	d037      	beq.n	8000846 <HAL_GPIO_Init+0x19e>
 80007d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007da:	42a8      	cmp	r0, r5
 80007dc:	d035      	beq.n	800084a <HAL_GPIO_Init+0x1a2>
 80007de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007e2:	42a8      	cmp	r0, r5
 80007e4:	d033      	beq.n	800084e <HAL_GPIO_Init+0x1a6>
 80007e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ea:	42a8      	cmp	r0, r5
 80007ec:	bf14      	ite	ne
 80007ee:	2507      	movne	r5, #7
 80007f0:	2506      	moveq	r5, #6
 80007f2:	fa05 f50c 	lsl.w	r5, r5, ip
 80007f6:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80007f8:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 80007fa:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80007fc:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000800:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8000802:	bf54      	ite	pl
 8000804:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000806:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 800080a:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 800080c:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800080e:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 8000810:	bf54      	ite	pl
 8000812:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000814:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8000818:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800081a:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800081c:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 800081e:	bf54      	ite	pl
 8000820:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000822:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8000826:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8000828:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800082a:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 800082c:	bf54      	ite	pl
 800082e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000830:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8000834:	60e5      	str	r5, [r4, #12]
    position++;
 8000836:	3301      	adds	r3, #1
 8000838:	e73f      	b.n	80006ba <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800083a:	2500      	movs	r5, #0
 800083c:	e7d9      	b.n	80007f2 <HAL_GPIO_Init+0x14a>
 800083e:	2501      	movs	r5, #1
 8000840:	e7d7      	b.n	80007f2 <HAL_GPIO_Init+0x14a>
 8000842:	2502      	movs	r5, #2
 8000844:	e7d5      	b.n	80007f2 <HAL_GPIO_Init+0x14a>
 8000846:	2503      	movs	r5, #3
 8000848:	e7d3      	b.n	80007f2 <HAL_GPIO_Init+0x14a>
 800084a:	2504      	movs	r5, #4
 800084c:	e7d1      	b.n	80007f2 <HAL_GPIO_Init+0x14a>
 800084e:	2505      	movs	r5, #5
 8000850:	e7cf      	b.n	80007f2 <HAL_GPIO_Init+0x14a>
 8000852:	bf00      	nop
 8000854:	40010400 	.word	0x40010400
 8000858:	48000400 	.word	0x48000400
 800085c:	40021000 	.word	0x40021000

08000860 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000860:	b10a      	cbz	r2, 8000866 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000862:	6181      	str	r1, [r0, #24]
 8000864:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000866:	6281      	str	r1, [r0, #40]	; 0x28
 8000868:	4770      	bx	lr
	...

0800086c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800086c:	4b02      	ldr	r3, [pc, #8]	; (8000878 <HAL_PWREx_GetVoltageRange+0xc>)
 800086e:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8000870:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40007000 	.word	0x40007000

0800087c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800087e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000880:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000884:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000888:	d11a      	bne.n	80008c0 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800088a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800088e:	d013      	beq.n	80008b8 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000890:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000892:	4912      	ldr	r1, [pc, #72]	; (80008dc <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000894:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800089c:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800089e:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80008a0:	6812      	ldr	r2, [r2, #0]
 80008a2:	fbb2 f1f1 	udiv	r1, r2, r1
 80008a6:	2232      	movs	r2, #50	; 0x32
 80008a8:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80008aa:	b112      	cbz	r2, 80008b2 <HAL_PWREx_ControlVoltageScaling+0x36>
 80008ac:	6959      	ldr	r1, [r3, #20]
 80008ae:	0549      	lsls	r1, r1, #21
 80008b0:	d404      	bmi.n	80008bc <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	055b      	lsls	r3, r3, #21
 80008b6:	d40d      	bmi.n	80008d4 <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 80008b8:	2000      	movs	r0, #0
 80008ba:	4770      	bx	lr
        wait_loop_index--;
 80008bc:	3a01      	subs	r2, #1
 80008be:	e7f4      	b.n	80008aa <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80008c0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80008c4:	bf1f      	itttt	ne
 80008c6:	681a      	ldrne	r2, [r3, #0]
 80008c8:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80008cc:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80008d0:	601a      	strne	r2, [r3, #0]
 80008d2:	e7f1      	b.n	80008b8 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 80008d4:	2003      	movs	r0, #3
}  
 80008d6:	4770      	bx	lr
 80008d8:	40007000 	.word	0x40007000
 80008dc:	000f4240 	.word	0x000f4240
 80008e0:	20000000 	.word	0x20000000

080008e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80008e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80008e6:	4d1e      	ldr	r5, [pc, #120]	; (8000960 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80008e8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008ea:	00da      	lsls	r2, r3, #3
{
 80008ec:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80008ee:	d518      	bpl.n	8000922 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80008f0:	f7ff ffbc 	bl	800086c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80008f4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80008f8:	d123      	bne.n	8000942 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80008fa:	2c80      	cmp	r4, #128	; 0x80
 80008fc:	d929      	bls.n	8000952 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80008fe:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000900:	bf8c      	ite	hi
 8000902:	2002      	movhi	r0, #2
 8000904:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000906:	4a17      	ldr	r2, [pc, #92]	; (8000964 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000908:	6813      	ldr	r3, [r2, #0]
 800090a:	f023 0307 	bic.w	r3, r3, #7
 800090e:	4303      	orrs	r3, r0
 8000910:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8000912:	6813      	ldr	r3, [r2, #0]
 8000914:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000918:	1a18      	subs	r0, r3, r0
 800091a:	bf18      	it	ne
 800091c:	2001      	movne	r0, #1
 800091e:	b003      	add	sp, #12
 8000920:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	65ab      	str	r3, [r5, #88]	; 0x58
 800092a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800092c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000930:	9301      	str	r3, [sp, #4]
 8000932:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000934:	f7ff ff9a 	bl	800086c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000938:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800093a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800093e:	65ab      	str	r3, [r5, #88]	; 0x58
 8000940:	e7d8      	b.n	80008f4 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000942:	2c80      	cmp	r4, #128	; 0x80
 8000944:	d807      	bhi.n	8000956 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8000946:	d008      	beq.n	800095a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000948:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 800094c:	4258      	negs	r0, r3
 800094e:	4158      	adcs	r0, r3
 8000950:	e7d9      	b.n	8000906 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000952:	2000      	movs	r0, #0
 8000954:	e7d7      	b.n	8000906 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000956:	2003      	movs	r0, #3
 8000958:	e7d5      	b.n	8000906 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800095a:	2002      	movs	r0, #2
 800095c:	e7d3      	b.n	8000906 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000
 8000964:	40022000 	.word	0x40022000

08000968 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000968:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <HAL_RCC_GetSysClockFreq+0xc0>)
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	f012 0f0c 	tst.w	r2, #12
{
 8000970:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000972:	d009      	beq.n	8000988 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000974:	689a      	ldr	r2, [r3, #8]
 8000976:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800097a:	2a0c      	cmp	r2, #12
 800097c:	d12d      	bne.n	80009da <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800097e:	68da      	ldr	r2, [r3, #12]
 8000980:	f002 0203 	and.w	r2, r2, #3
 8000984:	2a01      	cmp	r2, #1
 8000986:	d128      	bne.n	80009da <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000988:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800098a:	4928      	ldr	r1, [pc, #160]	; (8000a2c <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 800098c:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800098e:	bf55      	itete	pl
 8000990:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000994:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000996:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800099a:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800099e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80009a2:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 80009a4:	f011 0f0c 	tst.w	r1, #12
 80009a8:	bf0c      	ite	eq
 80009aa:	4610      	moveq	r0, r2
 80009ac:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80009ae:	6899      	ldr	r1, [r3, #8]
 80009b0:	f001 010c 	and.w	r1, r1, #12
 80009b4:	290c      	cmp	r1, #12
 80009b6:	d130      	bne.n	8000a1a <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80009b8:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80009ba:	68d8      	ldr	r0, [r3, #12]
 80009bc:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80009c0:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80009c2:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 80009c6:	2802      	cmp	r0, #2
 80009c8:	d019      	beq.n	80009fe <HAL_RCC_GetSysClockFreq+0x96>
 80009ca:	2803      	cmp	r0, #3
 80009cc:	d026      	beq.n	8000a1c <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80009ce:	fbb2 f2f1 	udiv	r2, r2, r1
 80009d2:	68d8      	ldr	r0, [r3, #12]
 80009d4:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80009d8:	e017      	b.n	8000a0a <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80009da:	689a      	ldr	r2, [r3, #8]
 80009dc:	f002 020c 	and.w	r2, r2, #12
 80009e0:	2a04      	cmp	r2, #4
 80009e2:	d007      	beq.n	80009f4 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80009e4:	689a      	ldr	r2, [r3, #8]
 80009e6:	f002 020c 	and.w	r2, r2, #12
 80009ea:	2a08      	cmp	r2, #8
 80009ec:	d104      	bne.n	80009f8 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 80009ee:	4810      	ldr	r0, [pc, #64]	; (8000a30 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80009f0:	2200      	movs	r2, #0
 80009f2:	e7dc      	b.n	80009ae <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 80009f4:	480f      	ldr	r0, [pc, #60]	; (8000a34 <HAL_RCC_GetSysClockFreq+0xcc>)
 80009f6:	e7fb      	b.n	80009f0 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 80009f8:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80009fa:	4602      	mov	r2, r0
 80009fc:	e7d7      	b.n	80009ae <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80009fe:	68da      	ldr	r2, [r3, #12]
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8000a02:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000a06:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000a10:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000a12:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000a14:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8000a16:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000a1a:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000a1c:	68da      	ldr	r2, [r3, #12]
 8000a1e:	4804      	ldr	r0, [pc, #16]	; (8000a30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000a20:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8000a24:	e7ef      	b.n	8000a06 <HAL_RCC_GetSysClockFreq+0x9e>
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	08002adc 	.word	0x08002adc
 8000a30:	007a1200 	.word	0x007a1200
 8000a34:	00f42400 	.word	0x00f42400

08000a38 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a38:	6803      	ldr	r3, [r0, #0]
{
 8000a3a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000a3e:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a40:	06d8      	lsls	r0, r3, #27
 8000a42:	d53b      	bpl.n	8000abc <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000a44:	4ca9      	ldr	r4, [pc, #676]	; (8000cec <HAL_RCC_OscConfig+0x2b4>)
 8000a46:	68a3      	ldr	r3, [r4, #8]
 8000a48:	f013 0f0c 	tst.w	r3, #12
 8000a4c:	d160      	bne.n	8000b10 <HAL_RCC_OscConfig+0xd8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000a4e:	6823      	ldr	r3, [r4, #0]
 8000a50:	0799      	lsls	r1, r3, #30
 8000a52:	d505      	bpl.n	8000a60 <HAL_RCC_OscConfig+0x28>
 8000a54:	69ab      	ldr	r3, [r5, #24]
 8000a56:	b91b      	cbnz	r3, 8000a60 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 8000a58:	2001      	movs	r0, #1
}
 8000a5a:	b002      	add	sp, #8
 8000a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000a60:	6823      	ldr	r3, [r4, #0]
 8000a62:	6a28      	ldr	r0, [r5, #32]
 8000a64:	071a      	lsls	r2, r3, #28
 8000a66:	bf56      	itet	pl
 8000a68:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000a6c:	6823      	ldrmi	r3, [r4, #0]
 8000a6e:	091b      	lsrpl	r3, r3, #4
 8000a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a74:	4283      	cmp	r3, r0
 8000a76:	d236      	bcs.n	8000ae6 <HAL_RCC_OscConfig+0xae>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a78:	f7ff ff34 	bl	80008e4 <RCC_SetFlashLatencyFromMSIRange>
 8000a7c:	2800      	cmp	r0, #0
 8000a7e:	d1eb      	bne.n	8000a58 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a80:	6823      	ldr	r3, [r4, #0]
 8000a82:	f043 0308 	orr.w	r3, r3, #8
 8000a86:	6023      	str	r3, [r4, #0]
 8000a88:	6823      	ldr	r3, [r4, #0]
 8000a8a:	6a2a      	ldr	r2, [r5, #32]
 8000a8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a90:	4313      	orrs	r3, r2
 8000a92:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a94:	6863      	ldr	r3, [r4, #4]
 8000a96:	69ea      	ldr	r2, [r5, #28]
 8000a98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000aa0:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000aa2:	f7ff ff61 	bl	8000968 <HAL_RCC_GetSysClockFreq>
 8000aa6:	68a3      	ldr	r3, [r4, #8]
 8000aa8:	4a91      	ldr	r2, [pc, #580]	; (8000cf0 <HAL_RCC_OscConfig+0x2b8>)
 8000aaa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000aae:	5cd3      	ldrb	r3, [r2, r3]
 8000ab0:	40d8      	lsrs	r0, r3
 8000ab2:	4b90      	ldr	r3, [pc, #576]	; (8000cf4 <HAL_RCC_OscConfig+0x2bc>)
 8000ab4:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff fd16 	bl	80004e8 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000abc:	682b      	ldr	r3, [r5, #0]
 8000abe:	07de      	lsls	r6, r3, #31
 8000ac0:	d45b      	bmi.n	8000b7a <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ac2:	682b      	ldr	r3, [r5, #0]
 8000ac4:	079c      	lsls	r4, r3, #30
 8000ac6:	f100 80a3 	bmi.w	8000c10 <HAL_RCC_OscConfig+0x1d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000aca:	682b      	ldr	r3, [r5, #0]
 8000acc:	0719      	lsls	r1, r3, #28
 8000ace:	f100 80e1 	bmi.w	8000c94 <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ad2:	682b      	ldr	r3, [r5, #0]
 8000ad4:	075a      	lsls	r2, r3, #29
 8000ad6:	f100 810f 	bmi.w	8000cf8 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000ada:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	f040 8176 	bne.w	8000dce <HAL_RCC_OscConfig+0x396>
  return HAL_OK;
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	e7b9      	b.n	8000a5a <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ae6:	6823      	ldr	r3, [r4, #0]
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	6023      	str	r3, [r4, #0]
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000af4:	4303      	orrs	r3, r0
 8000af6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000af8:	6863      	ldr	r3, [r4, #4]
 8000afa:	69ea      	ldr	r2, [r5, #28]
 8000afc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b04:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b06:	f7ff feed 	bl	80008e4 <RCC_SetFlashLatencyFromMSIRange>
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	d0c9      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x6a>
 8000b0e:	e7a3      	b.n	8000a58 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000b10:	69ab      	ldr	r3, [r5, #24]
 8000b12:	b313      	cbz	r3, 8000b5a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_MSI_ENABLE();
 8000b14:	6823      	ldr	r3, [r4, #0]
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b1c:	f7ff fd12 	bl	8000544 <HAL_GetTick>
 8000b20:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000b22:	6823      	ldr	r3, [r4, #0]
 8000b24:	079b      	lsls	r3, r3, #30
 8000b26:	d511      	bpl.n	8000b4c <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	f043 0308 	orr.w	r3, r3, #8
 8000b2e:	6023      	str	r3, [r4, #0]
 8000b30:	6823      	ldr	r3, [r4, #0]
 8000b32:	6a2a      	ldr	r2, [r5, #32]
 8000b34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b3c:	6863      	ldr	r3, [r4, #4]
 8000b3e:	69ea      	ldr	r2, [r5, #28]
 8000b40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b48:	6063      	str	r3, [r4, #4]
 8000b4a:	e7b7      	b.n	8000abc <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b4c:	f7ff fcfa 	bl	8000544 <HAL_GetTick>
 8000b50:	1b80      	subs	r0, r0, r6
 8000b52:	2802      	cmp	r0, #2
 8000b54:	d9e5      	bls.n	8000b22 <HAL_RCC_OscConfig+0xea>
            return HAL_TIMEOUT;
 8000b56:	2003      	movs	r0, #3
 8000b58:	e77f      	b.n	8000a5a <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 8000b5a:	6823      	ldr	r3, [r4, #0]
 8000b5c:	f023 0301 	bic.w	r3, r3, #1
 8000b60:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b62:	f7ff fcef 	bl	8000544 <HAL_GetTick>
 8000b66:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000b68:	6823      	ldr	r3, [r4, #0]
 8000b6a:	079f      	lsls	r7, r3, #30
 8000b6c:	d5a6      	bpl.n	8000abc <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b6e:	f7ff fce9 	bl	8000544 <HAL_GetTick>
 8000b72:	1b80      	subs	r0, r0, r6
 8000b74:	2802      	cmp	r0, #2
 8000b76:	d9f7      	bls.n	8000b68 <HAL_RCC_OscConfig+0x130>
 8000b78:	e7ed      	b.n	8000b56 <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8000b7a:	4c5c      	ldr	r4, [pc, #368]	; (8000cec <HAL_RCC_OscConfig+0x2b4>)
 8000b7c:	68a3      	ldr	r3, [r4, #8]
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	2b08      	cmp	r3, #8
 8000b84:	d009      	beq.n	8000b9a <HAL_RCC_OscConfig+0x162>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b86:	68a3      	ldr	r3, [r4, #8]
 8000b88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8000b8c:	2b0c      	cmp	r3, #12
 8000b8e:	d10b      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x170>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b90:	68e3      	ldr	r3, [r4, #12]
 8000b92:	f003 0303 	and.w	r3, r3, #3
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	d106      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x170>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b9a:	6823      	ldr	r3, [r4, #0]
 8000b9c:	0398      	lsls	r0, r3, #14
 8000b9e:	d590      	bpl.n	8000ac2 <HAL_RCC_OscConfig+0x8a>
 8000ba0:	686b      	ldr	r3, [r5, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d18d      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x8a>
 8000ba6:	e757      	b.n	8000a58 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ba8:	686b      	ldr	r3, [r5, #4]
 8000baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bae:	d110      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x19a>
 8000bb0:	6823      	ldr	r3, [r4, #0]
 8000bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bb8:	f7ff fcc4 	bl	8000544 <HAL_GetTick>
 8000bbc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000bbe:	6823      	ldr	r3, [r4, #0]
 8000bc0:	0399      	lsls	r1, r3, #14
 8000bc2:	f53f af7e 	bmi.w	8000ac2 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bc6:	f7ff fcbd 	bl	8000544 <HAL_GetTick>
 8000bca:	1b80      	subs	r0, r0, r6
 8000bcc:	2864      	cmp	r0, #100	; 0x64
 8000bce:	d9f6      	bls.n	8000bbe <HAL_RCC_OscConfig+0x186>
 8000bd0:	e7c1      	b.n	8000b56 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bd6:	d104      	bne.n	8000be2 <HAL_RCC_OscConfig+0x1aa>
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bde:	6023      	str	r3, [r4, #0]
 8000be0:	e7e6      	b.n	8000bb0 <HAL_RCC_OscConfig+0x178>
 8000be2:	6822      	ldr	r2, [r4, #0]
 8000be4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000be8:	6022      	str	r2, [r4, #0]
 8000bea:	6822      	ldr	r2, [r4, #0]
 8000bec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000bf0:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1e0      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x180>
        tickstart = HAL_GetTick();
 8000bf6:	f7ff fca5 	bl	8000544 <HAL_GetTick>
 8000bfa:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000bfc:	6823      	ldr	r3, [r4, #0]
 8000bfe:	039a      	lsls	r2, r3, #14
 8000c00:	f57f af5f 	bpl.w	8000ac2 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c04:	f7ff fc9e 	bl	8000544 <HAL_GetTick>
 8000c08:	1b80      	subs	r0, r0, r6
 8000c0a:	2864      	cmp	r0, #100	; 0x64
 8000c0c:	d9f6      	bls.n	8000bfc <HAL_RCC_OscConfig+0x1c4>
 8000c0e:	e7a2      	b.n	8000b56 <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000c10:	4c36      	ldr	r4, [pc, #216]	; (8000cec <HAL_RCC_OscConfig+0x2b4>)
 8000c12:	68a3      	ldr	r3, [r4, #8]
 8000c14:	f003 030c 	and.w	r3, r3, #12
 8000c18:	2b04      	cmp	r3, #4
 8000c1a:	d009      	beq.n	8000c30 <HAL_RCC_OscConfig+0x1f8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c1c:	68a3      	ldr	r3, [r4, #8]
 8000c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000c22:	2b0c      	cmp	r3, #12
 8000c24:	d113      	bne.n	8000c4e <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c26:	68e3      	ldr	r3, [r4, #12]
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d10e      	bne.n	8000c4e <HAL_RCC_OscConfig+0x216>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	055b      	lsls	r3, r3, #21
 8000c34:	d503      	bpl.n	8000c3e <HAL_RCC_OscConfig+0x206>
 8000c36:	68eb      	ldr	r3, [r5, #12]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f43f af0d 	beq.w	8000a58 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c3e:	6863      	ldr	r3, [r4, #4]
 8000c40:	692a      	ldr	r2, [r5, #16]
 8000c42:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000c46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000c4a:	6063      	str	r3, [r4, #4]
 8000c4c:	e73d      	b.n	8000aca <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c4e:	68eb      	ldr	r3, [r5, #12]
 8000c50:	b17b      	cbz	r3, 8000c72 <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_HSI_ENABLE();
 8000c52:	6823      	ldr	r3, [r4, #0]
 8000c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c58:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c5a:	f7ff fc73 	bl	8000544 <HAL_GetTick>
 8000c5e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000c60:	6823      	ldr	r3, [r4, #0]
 8000c62:	055f      	lsls	r7, r3, #21
 8000c64:	d4eb      	bmi.n	8000c3e <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c66:	f7ff fc6d 	bl	8000544 <HAL_GetTick>
 8000c6a:	1b80      	subs	r0, r0, r6
 8000c6c:	2802      	cmp	r0, #2
 8000c6e:	d9f7      	bls.n	8000c60 <HAL_RCC_OscConfig+0x228>
 8000c70:	e771      	b.n	8000b56 <HAL_RCC_OscConfig+0x11e>
        __HAL_RCC_HSI_DISABLE();
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c78:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c7a:	f7ff fc63 	bl	8000544 <HAL_GetTick>
 8000c7e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000c80:	6823      	ldr	r3, [r4, #0]
 8000c82:	0558      	lsls	r0, r3, #21
 8000c84:	f57f af21 	bpl.w	8000aca <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c88:	f7ff fc5c 	bl	8000544 <HAL_GetTick>
 8000c8c:	1b80      	subs	r0, r0, r6
 8000c8e:	2802      	cmp	r0, #2
 8000c90:	d9f6      	bls.n	8000c80 <HAL_RCC_OscConfig+0x248>
 8000c92:	e760      	b.n	8000b56 <HAL_RCC_OscConfig+0x11e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c94:	696b      	ldr	r3, [r5, #20]
 8000c96:	4c15      	ldr	r4, [pc, #84]	; (8000cec <HAL_RCC_OscConfig+0x2b4>)
 8000c98:	b19b      	cbz	r3, 8000cc2 <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSI_ENABLE();
 8000c9a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000ca6:	f7ff fc4d 	bl	8000544 <HAL_GetTick>
 8000caa:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8000cac:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000cb0:	079b      	lsls	r3, r3, #30
 8000cb2:	f53f af0e 	bmi.w	8000ad2 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cb6:	f7ff fc45 	bl	8000544 <HAL_GetTick>
 8000cba:	1b80      	subs	r0, r0, r6
 8000cbc:	2802      	cmp	r0, #2
 8000cbe:	d9f5      	bls.n	8000cac <HAL_RCC_OscConfig+0x274>
 8000cc0:	e749      	b.n	8000b56 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_LSI_DISABLE();
 8000cc2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000cc6:	f023 0301 	bic.w	r3, r3, #1
 8000cca:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000cce:	f7ff fc39 	bl	8000544 <HAL_GetTick>
 8000cd2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000cd4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000cd8:	079f      	lsls	r7, r3, #30
 8000cda:	f57f aefa 	bpl.w	8000ad2 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cde:	f7ff fc31 	bl	8000544 <HAL_GetTick>
 8000ce2:	1b80      	subs	r0, r0, r6
 8000ce4:	2802      	cmp	r0, #2
 8000ce6:	d9f5      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x29c>
 8000ce8:	e735      	b.n	8000b56 <HAL_RCC_OscConfig+0x11e>
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	08002ac3 	.word	0x08002ac3
 8000cf4:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000cf8:	4c66      	ldr	r4, [pc, #408]	; (8000e94 <HAL_RCC_OscConfig+0x45c>)
 8000cfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000cfc:	00de      	lsls	r6, r3, #3
 8000cfe:	d427      	bmi.n	8000d50 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d06:	65a3      	str	r3, [r4, #88]	; 0x58
 8000d08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d12:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d14:	4e60      	ldr	r6, [pc, #384]	; (8000e98 <HAL_RCC_OscConfig+0x460>)
 8000d16:	6833      	ldr	r3, [r6, #0]
 8000d18:	05d8      	lsls	r0, r3, #23
 8000d1a:	d51b      	bpl.n	8000d54 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d1c:	68ab      	ldr	r3, [r5, #8]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d129      	bne.n	8000d76 <HAL_RCC_OscConfig+0x33e>
 8000d22:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000d2e:	f7ff fc09 	bl	8000544 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d32:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d36:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8000d38:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d3c:	079a      	lsls	r2, r3, #30
 8000d3e:	d540      	bpl.n	8000dc2 <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8000d40:	2f00      	cmp	r7, #0
 8000d42:	f43f aeca 	beq.w	8000ada <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	65a3      	str	r3, [r4, #88]	; 0x58
 8000d4e:	e6c4      	b.n	8000ada <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 8000d50:	2700      	movs	r7, #0
 8000d52:	e7df      	b.n	8000d14 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d54:	6833      	ldr	r3, [r6, #0]
 8000d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000d5c:	f7ff fbf2 	bl	8000544 <HAL_GetTick>
 8000d60:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d62:	6833      	ldr	r3, [r6, #0]
 8000d64:	05d9      	lsls	r1, r3, #23
 8000d66:	d4d9      	bmi.n	8000d1c <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d68:	f7ff fbec 	bl	8000544 <HAL_GetTick>
 8000d6c:	eba0 0008 	sub.w	r0, r0, r8
 8000d70:	2802      	cmp	r0, #2
 8000d72:	d9f6      	bls.n	8000d62 <HAL_RCC_OscConfig+0x32a>
 8000d74:	e6ef      	b.n	8000b56 <HAL_RCC_OscConfig+0x11e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d76:	2b05      	cmp	r3, #5
 8000d78:	d106      	bne.n	8000d88 <HAL_RCC_OscConfig+0x350>
 8000d7a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000d86:	e7cc      	b.n	8000d22 <HAL_RCC_OscConfig+0x2ea>
 8000d88:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000d8c:	f022 0201 	bic.w	r2, r2, #1
 8000d90:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000d94:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000d98:	f022 0204 	bic.w	r2, r2, #4
 8000d9c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1c4      	bne.n	8000d2e <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8000da4:	f7ff fbce 	bl	8000544 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000da8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000dac:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8000dae:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000db2:	079b      	lsls	r3, r3, #30
 8000db4:	d5c4      	bpl.n	8000d40 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000db6:	f7ff fbc5 	bl	8000544 <HAL_GetTick>
 8000dba:	1b80      	subs	r0, r0, r6
 8000dbc:	4540      	cmp	r0, r8
 8000dbe:	d9f6      	bls.n	8000dae <HAL_RCC_OscConfig+0x376>
 8000dc0:	e6c9      	b.n	8000b56 <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dc2:	f7ff fbbf 	bl	8000544 <HAL_GetTick>
 8000dc6:	1b80      	subs	r0, r0, r6
 8000dc8:	4540      	cmp	r0, r8
 8000dca:	d9b5      	bls.n	8000d38 <HAL_RCC_OscConfig+0x300>
 8000dcc:	e6c3      	b.n	8000b56 <HAL_RCC_OscConfig+0x11e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000dce:	4c31      	ldr	r4, [pc, #196]	; (8000e94 <HAL_RCC_OscConfig+0x45c>)
 8000dd0:	68a3      	ldr	r3, [r4, #8]
 8000dd2:	f003 030c 	and.w	r3, r3, #12
 8000dd6:	2b0c      	cmp	r3, #12
 8000dd8:	f43f ae3e 	beq.w	8000a58 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8000ddc:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000dde:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000de0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000de4:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000de6:	d137      	bne.n	8000e58 <HAL_RCC_OscConfig+0x420>
        tickstart = HAL_GetTick();
 8000de8:	f7ff fbac 	bl	8000544 <HAL_GetTick>
 8000dec:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	019f      	lsls	r7, r3, #6
 8000df2:	d42b      	bmi.n	8000e4c <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000df4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000df6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000df8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000dfc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000dfe:	3a01      	subs	r2, #1
 8000e00:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000e04:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000e06:	0912      	lsrs	r2, r2, #4
 8000e08:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000e0c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000e0e:	0852      	lsrs	r2, r2, #1
 8000e10:	3a01      	subs	r2, #1
 8000e12:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000e16:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000e18:	0852      	lsrs	r2, r2, #1
 8000e1a:	3a01      	subs	r2, #1
 8000e1c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000e20:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e28:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000e2a:	68e3      	ldr	r3, [r4, #12]
 8000e2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e30:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000e32:	f7ff fb87 	bl	8000544 <HAL_GetTick>
 8000e36:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000e38:	6823      	ldr	r3, [r4, #0]
 8000e3a:	0198      	lsls	r0, r3, #6
 8000e3c:	f53f ae51 	bmi.w	8000ae2 <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e40:	f7ff fb80 	bl	8000544 <HAL_GetTick>
 8000e44:	1b40      	subs	r0, r0, r5
 8000e46:	2802      	cmp	r0, #2
 8000e48:	d9f6      	bls.n	8000e38 <HAL_RCC_OscConfig+0x400>
 8000e4a:	e684      	b.n	8000b56 <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e4c:	f7ff fb7a 	bl	8000544 <HAL_GetTick>
 8000e50:	1b80      	subs	r0, r0, r6
 8000e52:	2802      	cmp	r0, #2
 8000e54:	d9cb      	bls.n	8000dee <HAL_RCC_OscConfig+0x3b6>
 8000e56:	e67e      	b.n	8000b56 <HAL_RCC_OscConfig+0x11e>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8000e58:	6823      	ldr	r3, [r4, #0]
 8000e5a:	0119      	lsls	r1, r3, #4
 8000e5c:	d406      	bmi.n	8000e6c <HAL_RCC_OscConfig+0x434>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8000e5e:	6823      	ldr	r3, [r4, #0]
           &&
 8000e60:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000e62:	bf5e      	ittt	pl
 8000e64:	68e3      	ldrpl	r3, [r4, #12]
 8000e66:	f023 0303 	bicpl.w	r3, r3, #3
 8000e6a:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000e6c:	68e3      	ldr	r3, [r4, #12]
 8000e6e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e76:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000e78:	f7ff fb64 	bl	8000544 <HAL_GetTick>
 8000e7c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000e7e:	6823      	ldr	r3, [r4, #0]
 8000e80:	019b      	lsls	r3, r3, #6
 8000e82:	f57f ae2e 	bpl.w	8000ae2 <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e86:	f7ff fb5d 	bl	8000544 <HAL_GetTick>
 8000e8a:	1b40      	subs	r0, r0, r5
 8000e8c:	2802      	cmp	r0, #2
 8000e8e:	d9f6      	bls.n	8000e7e <HAL_RCC_OscConfig+0x446>
 8000e90:	e661      	b.n	8000b56 <HAL_RCC_OscConfig+0x11e>
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40007000 	.word	0x40007000

08000e9c <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8000e9c:	4a56      	ldr	r2, [pc, #344]	; (8000ff8 <HAL_RCC_ClockConfig+0x15c>)
 8000e9e:	6813      	ldr	r3, [r2, #0]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	428b      	cmp	r3, r1
{
 8000ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eaa:	4605      	mov	r5, r0
 8000eac:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8000eae:	d32b      	bcc.n	8000f08 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eb0:	682b      	ldr	r3, [r5, #0]
 8000eb2:	07d9      	lsls	r1, r3, #31
 8000eb4:	d435      	bmi.n	8000f22 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000eb6:	6829      	ldr	r1, [r5, #0]
 8000eb8:	078a      	lsls	r2, r1, #30
 8000eba:	f100 8083 	bmi.w	8000fc4 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8000ebe:	4a4e      	ldr	r2, [pc, #312]	; (8000ff8 <HAL_RCC_ClockConfig+0x15c>)
 8000ec0:	6813      	ldr	r3, [r2, #0]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	429e      	cmp	r6, r3
 8000ec8:	f0c0 8084 	bcc.w	8000fd4 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ecc:	f011 0f04 	tst.w	r1, #4
 8000ed0:	4c4a      	ldr	r4, [pc, #296]	; (8000ffc <HAL_RCC_ClockConfig+0x160>)
 8000ed2:	f040 808a 	bne.w	8000fea <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ed6:	070b      	lsls	r3, r1, #28
 8000ed8:	d506      	bpl.n	8000ee8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000eda:	68a3      	ldr	r3, [r4, #8]
 8000edc:	692a      	ldr	r2, [r5, #16]
 8000ede:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ee2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ee6:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000ee8:	f7ff fd3e 	bl	8000968 <HAL_RCC_GetSysClockFreq>
 8000eec:	68a3      	ldr	r3, [r4, #8]
 8000eee:	4a44      	ldr	r2, [pc, #272]	; (8001000 <HAL_RCC_ClockConfig+0x164>)
 8000ef0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ef4:	5cd3      	ldrb	r3, [r2, r3]
 8000ef6:	40d8      	lsrs	r0, r3
 8000ef8:	4b42      	ldr	r3, [pc, #264]	; (8001004 <HAL_RCC_ClockConfig+0x168>)
 8000efa:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff faf3 	bl	80004e8 <HAL_InitTick>
  return HAL_OK;
 8000f02:	2000      	movs	r0, #0
}
 8000f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f08:	6813      	ldr	r3, [r2, #0]
 8000f0a:	f023 0307 	bic.w	r3, r3, #7
 8000f0e:	430b      	orrs	r3, r1
 8000f10:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8000f12:	6813      	ldr	r3, [r2, #0]
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d0c9      	beq.n	8000eb0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f22:	686a      	ldr	r2, [r5, #4]
 8000f24:	4c35      	ldr	r4, [pc, #212]	; (8000ffc <HAL_RCC_ClockConfig+0x160>)
 8000f26:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000f28:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f2a:	d11c      	bne.n	8000f66 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000f2c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000f30:	d0f4      	beq.n	8000f1c <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000f32:	68a3      	ldr	r3, [r4, #8]
 8000f34:	f023 0303 	bic.w	r3, r3, #3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8000f3c:	f7ff fb02 	bl	8000544 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f40:	686b      	ldr	r3, [r5, #4]
 8000f42:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 8000f44:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f46:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f4a:	d118      	bne.n	8000f7e <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f4c:	68a3      	ldr	r3, [r4, #8]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	2b0c      	cmp	r3, #12
 8000f54:	d0af      	beq.n	8000eb6 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f56:	f7ff faf5 	bl	8000544 <HAL_GetTick>
 8000f5a:	1bc0      	subs	r0, r0, r7
 8000f5c:	4540      	cmp	r0, r8
 8000f5e:	d9f5      	bls.n	8000f4c <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000f60:	2003      	movs	r0, #3
 8000f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f66:	2a02      	cmp	r2, #2
 8000f68:	d102      	bne.n	8000f70 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000f6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f6e:	e7df      	b.n	8000f30 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f70:	b912      	cbnz	r2, 8000f78 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000f72:	f013 0f02 	tst.w	r3, #2
 8000f76:	e7db      	b.n	8000f30 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000f78:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000f7c:	e7d8      	b.n	8000f30 <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d10a      	bne.n	8000f98 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8000f82:	68a3      	ldr	r3, [r4, #8]
 8000f84:	f003 030c 	and.w	r3, r3, #12
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	d094      	beq.n	8000eb6 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f8c:	f7ff fada 	bl	8000544 <HAL_GetTick>
 8000f90:	1bc0      	subs	r0, r0, r7
 8000f92:	4540      	cmp	r0, r8
 8000f94:	d9f5      	bls.n	8000f82 <HAL_RCC_ClockConfig+0xe6>
 8000f96:	e7e3      	b.n	8000f60 <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f98:	b973      	cbnz	r3, 8000fb8 <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8000f9a:	68a3      	ldr	r3, [r4, #8]
 8000f9c:	f013 0f0c 	tst.w	r3, #12
 8000fa0:	d089      	beq.n	8000eb6 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fa2:	f7ff facf 	bl	8000544 <HAL_GetTick>
 8000fa6:	1bc0      	subs	r0, r0, r7
 8000fa8:	4540      	cmp	r0, r8
 8000faa:	d9f6      	bls.n	8000f9a <HAL_RCC_ClockConfig+0xfe>
 8000fac:	e7d8      	b.n	8000f60 <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fae:	f7ff fac9 	bl	8000544 <HAL_GetTick>
 8000fb2:	1bc0      	subs	r0, r0, r7
 8000fb4:	4540      	cmp	r0, r8
 8000fb6:	d8d3      	bhi.n	8000f60 <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8000fb8:	68a3      	ldr	r3, [r4, #8]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d1f5      	bne.n	8000fae <HAL_RCC_ClockConfig+0x112>
 8000fc2:	e778      	b.n	8000eb6 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <HAL_RCC_ClockConfig+0x160>)
 8000fc6:	68a8      	ldr	r0, [r5, #8]
 8000fc8:	6893      	ldr	r3, [r2, #8]
 8000fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fce:	4303      	orrs	r3, r0
 8000fd0:	6093      	str	r3, [r2, #8]
 8000fd2:	e774      	b.n	8000ebe <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd4:	6813      	ldr	r3, [r2, #0]
 8000fd6:	f023 0307 	bic.w	r3, r3, #7
 8000fda:	4333      	orrs	r3, r6
 8000fdc:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8000fde:	6813      	ldr	r3, [r2, #0]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	429e      	cmp	r6, r3
 8000fe6:	d199      	bne.n	8000f1c <HAL_RCC_ClockConfig+0x80>
 8000fe8:	e770      	b.n	8000ecc <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fea:	68a3      	ldr	r3, [r4, #8]
 8000fec:	68ea      	ldr	r2, [r5, #12]
 8000fee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60a3      	str	r3, [r4, #8]
 8000ff6:	e76e      	b.n	8000ed6 <HAL_RCC_ClockConfig+0x3a>
 8000ff8:	40022000 	.word	0x40022000
 8000ffc:	40021000 	.word	0x40021000
 8001000:	08002ac3 	.word	0x08002ac3
 8001004:	20000000 	.word	0x20000000

08001008 <HAL_RCC_GetHCLKFreq>:
}
 8001008:	4b01      	ldr	r3, [pc, #4]	; (8001010 <HAL_RCC_GetHCLKFreq+0x8>)
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000000 	.word	0x20000000

08001014 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800101e:	5cd3      	ldrb	r3, [r2, r3]
 8001020:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001022:	6810      	ldr	r0, [r2, #0]
}
 8001024:	40d8      	lsrs	r0, r3
 8001026:	4770      	bx	lr
 8001028:	40021000 	.word	0x40021000
 800102c:	08002ad3 	.word	0x08002ad3
 8001030:	20000000 	.word	0x20000000

08001034 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800103e:	5cd3      	ldrb	r3, [r2, r3]
 8001040:	4a03      	ldr	r2, [pc, #12]	; (8001050 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001042:	6810      	ldr	r0, [r2, #0]
}
 8001044:	40d8      	lsrs	r0, r3
 8001046:	4770      	bx	lr
 8001048:	40021000 	.word	0x40021000
 800104c:	08002ad3 	.word	0x08002ad3
 8001050:	20000000 	.word	0x20000000

08001054 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001056:	4b45      	ldr	r3, [pc, #276]	; (800116c <RCCEx_PLLSAI1_Config+0x118>)
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	f012 0f03 	tst.w	r2, #3
{
 800105e:	4605      	mov	r5, r0
 8001060:	460e      	mov	r6, r1
 8001062:	461c      	mov	r4, r3
 8001064:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001066:	d02a      	beq.n	80010be <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	f002 0203 	and.w	r2, r2, #3
 800106e:	4282      	cmp	r2, r0
 8001070:	d13c      	bne.n	80010ec <RCCEx_PLLSAI1_Config+0x98>
       ||
 8001072:	2a00      	cmp	r2, #0
 8001074:	d03a      	beq.n	80010ec <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001076:	68db      	ldr	r3, [r3, #12]
       ||
 8001078:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800107a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800107e:	3301      	adds	r3, #1
       ||
 8001080:	4293      	cmp	r3, r2
 8001082:	d133      	bne.n	80010ec <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800108a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800108c:	f7ff fa5a 	bl	8000544 <HAL_GetTick>
 8001090:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8001092:	6823      	ldr	r3, [r4, #0]
 8001094:	011a      	lsls	r2, r3, #4
 8001096:	d432      	bmi.n	80010fe <RCCEx_PLLSAI1_Config+0xaa>
 8001098:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800109a:	2e00      	cmp	r6, #0
 800109c:	d036      	beq.n	800110c <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800109e:	2e01      	cmp	r6, #1
 80010a0:	d150      	bne.n	8001144 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80010a2:	6922      	ldr	r2, [r4, #16]
 80010a4:	6928      	ldr	r0, [r5, #16]
 80010a6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80010aa:	0840      	lsrs	r0, r0, #1
 80010ac:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80010b0:	3801      	subs	r0, #1
 80010b2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80010b6:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80010ba:	6122      	str	r2, [r4, #16]
 80010bc:	e032      	b.n	8001124 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 80010be:	2802      	cmp	r0, #2
 80010c0:	d010      	beq.n	80010e4 <RCCEx_PLLSAI1_Config+0x90>
 80010c2:	2803      	cmp	r0, #3
 80010c4:	d014      	beq.n	80010f0 <RCCEx_PLLSAI1_Config+0x9c>
 80010c6:	2801      	cmp	r0, #1
 80010c8:	d110      	bne.n	80010ec <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	079f      	lsls	r7, r3, #30
 80010ce:	d538      	bpl.n	8001142 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80010d0:	68e3      	ldr	r3, [r4, #12]
 80010d2:	686a      	ldr	r2, [r5, #4]
 80010d4:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80010d8:	3a01      	subs	r2, #1
 80010da:	4318      	orrs	r0, r3
 80010dc:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80010e0:	60e0      	str	r0, [r4, #12]
 80010e2:	e7cf      	b.n	8001084 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80010ea:	d1f1      	bne.n	80010d0 <RCCEx_PLLSAI1_Config+0x7c>
 80010ec:	2001      	movs	r0, #1
 80010ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	0391      	lsls	r1, r2, #14
 80010f4:	d4ec      	bmi.n	80010d0 <RCCEx_PLLSAI1_Config+0x7c>
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80010fc:	e7f5      	b.n	80010ea <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80010fe:	f7ff fa21 	bl	8000544 <HAL_GetTick>
 8001102:	1bc0      	subs	r0, r0, r7
 8001104:	2802      	cmp	r0, #2
 8001106:	d9c4      	bls.n	8001092 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001108:	2003      	movs	r0, #3
 800110a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800110c:	6921      	ldr	r1, [r4, #16]
 800110e:	68eb      	ldr	r3, [r5, #12]
 8001110:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001114:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001118:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800111c:	091b      	lsrs	r3, r3, #4
 800111e:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8001122:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001124:	6823      	ldr	r3, [r4, #0]
 8001126:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800112a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800112c:	f7ff fa0a 	bl	8000544 <HAL_GetTick>
 8001130:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	011b      	lsls	r3, r3, #4
 8001136:	d513      	bpl.n	8001160 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001138:	6923      	ldr	r3, [r4, #16]
 800113a:	69aa      	ldr	r2, [r5, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	6123      	str	r3, [r4, #16]
 8001140:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001144:	6923      	ldr	r3, [r4, #16]
 8001146:	6968      	ldr	r0, [r5, #20]
 8001148:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800114c:	0840      	lsrs	r0, r0, #1
 800114e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001152:	3801      	subs	r0, #1
 8001154:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001158:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800115c:	6123      	str	r3, [r4, #16]
 800115e:	e7e1      	b.n	8001124 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001160:	f7ff f9f0 	bl	8000544 <HAL_GetTick>
 8001164:	1b80      	subs	r0, r0, r6
 8001166:	2802      	cmp	r0, #2
 8001168:	d9e3      	bls.n	8001132 <RCCEx_PLLSAI1_Config+0xde>
 800116a:	e7cd      	b.n	8001108 <RCCEx_PLLSAI1_Config+0xb4>
 800116c:	40021000 	.word	0x40021000

08001170 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001172:	4b3d      	ldr	r3, [pc, #244]	; (8001268 <RCCEx_PLLSAI2_Config+0xf8>)
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	f012 0f03 	tst.w	r2, #3
{
 800117a:	4605      	mov	r5, r0
 800117c:	460e      	mov	r6, r1
 800117e:	461c      	mov	r4, r3
 8001180:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001182:	d028      	beq.n	80011d6 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	f002 0203 	and.w	r2, r2, #3
 800118a:	4282      	cmp	r2, r0
 800118c:	d13a      	bne.n	8001204 <RCCEx_PLLSAI2_Config+0x94>
       ||
 800118e:	2a00      	cmp	r2, #0
 8001190:	d038      	beq.n	8001204 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001192:	68db      	ldr	r3, [r3, #12]
       ||
 8001194:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001196:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800119a:	3301      	adds	r3, #1
       ||
 800119c:	4293      	cmp	r3, r2
 800119e:	d131      	bne.n	8001204 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011a6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80011a8:	f7ff f9cc 	bl	8000544 <HAL_GetTick>
 80011ac:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	009a      	lsls	r2, r3, #2
 80011b2:	d430      	bmi.n	8001216 <RCCEx_PLLSAI2_Config+0xa6>
 80011b4:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80011b6:	2e00      	cmp	r6, #0
 80011b8:	d034      	beq.n	8001224 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80011ba:	6963      	ldr	r3, [r4, #20]
 80011bc:	6929      	ldr	r1, [r5, #16]
 80011be:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80011c2:	0849      	lsrs	r1, r1, #1
 80011c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80011c8:	3901      	subs	r1, #1
 80011ca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80011ce:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80011d2:	6163      	str	r3, [r4, #20]
 80011d4:	e032      	b.n	800123c <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 80011d6:	2802      	cmp	r0, #2
 80011d8:	d010      	beq.n	80011fc <RCCEx_PLLSAI2_Config+0x8c>
 80011da:	2803      	cmp	r0, #3
 80011dc:	d014      	beq.n	8001208 <RCCEx_PLLSAI2_Config+0x98>
 80011de:	2801      	cmp	r0, #1
 80011e0:	d110      	bne.n	8001204 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	079f      	lsls	r7, r3, #30
 80011e6:	d538      	bpl.n	800125a <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80011e8:	68e3      	ldr	r3, [r4, #12]
 80011ea:	686a      	ldr	r2, [r5, #4]
 80011ec:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80011f0:	3a01      	subs	r2, #1
 80011f2:	4318      	orrs	r0, r3
 80011f4:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80011f8:	60e0      	str	r0, [r4, #12]
 80011fa:	e7d1      	b.n	80011a0 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001202:	d1f1      	bne.n	80011e8 <RCCEx_PLLSAI2_Config+0x78>
 8001204:	2001      	movs	r0, #1
 8001206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	0391      	lsls	r1, r2, #14
 800120c:	d4ec      	bmi.n	80011e8 <RCCEx_PLLSAI2_Config+0x78>
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001214:	e7f5      	b.n	8001202 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001216:	f7ff f995 	bl	8000544 <HAL_GetTick>
 800121a:	1bc0      	subs	r0, r0, r7
 800121c:	2802      	cmp	r0, #2
 800121e:	d9c6      	bls.n	80011ae <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8001220:	2003      	movs	r0, #3
 8001222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001224:	6962      	ldr	r2, [r4, #20]
 8001226:	68eb      	ldr	r3, [r5, #12]
 8001228:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 800122c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001230:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001234:	091b      	lsrs	r3, r3, #4
 8001236:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800123a:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001242:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001244:	f7ff f97e 	bl	8000544 <HAL_GetTick>
 8001248:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	d505      	bpl.n	800125c <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001250:	6963      	ldr	r3, [r4, #20]
 8001252:	696a      	ldr	r2, [r5, #20]
 8001254:	4313      	orrs	r3, r2
 8001256:	6163      	str	r3, [r4, #20]
 8001258:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800125c:	f7ff f972 	bl	8000544 <HAL_GetTick>
 8001260:	1b80      	subs	r0, r0, r6
 8001262:	2802      	cmp	r0, #2
 8001264:	d9f1      	bls.n	800124a <RCCEx_PLLSAI2_Config+0xda>
 8001266:	e7db      	b.n	8001220 <RCCEx_PLLSAI2_Config+0xb0>
 8001268:	40021000 	.word	0x40021000

0800126c <HAL_RCCEx_PeriphCLKConfig>:
{
 800126c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001270:	6806      	ldr	r6, [r0, #0]
 8001272:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8001276:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001278:	d024      	beq.n	80012c4 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800127a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800127c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001280:	d02c      	beq.n	80012dc <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001282:	d802      	bhi.n	800128a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001284:	b1c1      	cbz	r1, 80012b8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8001286:	2601      	movs	r6, #1
 8001288:	e01c      	b.n	80012c4 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800128a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800128e:	d00d      	beq.n	80012ac <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001290:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001294:	d1f7      	bne.n	8001286 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001296:	4a53      	ldr	r2, [pc, #332]	; (80013e4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001298:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800129a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800129e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80012a2:	430b      	orrs	r3, r1
 80012a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80012a8:	2600      	movs	r6, #0
 80012aa:	e00b      	b.n	80012c4 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80012ac:	4a4d      	ldr	r2, [pc, #308]	; (80013e4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80012ae:	68d3      	ldr	r3, [r2, #12]
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	60d3      	str	r3, [r2, #12]
      break;
 80012b6:	e7ee      	b.n	8001296 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80012b8:	3004      	adds	r0, #4
 80012ba:	f7ff fecb 	bl	8001054 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80012be:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80012c0:	2800      	cmp	r0, #0
 80012c2:	d0e8      	beq.n	8001296 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	04d8      	lsls	r0, r3, #19
 80012c8:	d506      	bpl.n	80012d8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80012ca:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80012cc:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80012d0:	d07c      	beq.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 80012d2:	d808      	bhi.n	80012e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80012d4:	b1a9      	cbz	r1, 8001302 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 80012d6:	2601      	movs	r6, #1
 80012d8:	4635      	mov	r5, r6
 80012da:	e021      	b.n	8001320 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80012dc:	2100      	movs	r1, #0
 80012de:	3020      	adds	r0, #32
 80012e0:	f7ff ff46 	bl	8001170 <RCCEx_PLLSAI2_Config>
 80012e4:	e7eb      	b.n	80012be <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80012e6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80012ea:	d004      	beq.n	80012f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80012ec:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80012f0:	d1f1      	bne.n	80012d6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80012f2:	4635      	mov	r5, r6
 80012f4:	e009      	b.n	800130a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80012f6:	4a3b      	ldr	r2, [pc, #236]	; (80013e4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80012f8:	68d3      	ldr	r3, [r2, #12]
 80012fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fe:	60d3      	str	r3, [r2, #12]
 8001300:	e7f7      	b.n	80012f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001302:	1d20      	adds	r0, r4, #4
 8001304:	f7ff fea6 	bl	8001054 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001308:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800130a:	2d00      	cmp	r5, #0
 800130c:	d164      	bne.n	80013d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800130e:	4a35      	ldr	r2, [pc, #212]	; (80013e4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001310:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001312:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001316:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800131a:	430b      	orrs	r3, r1
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	0399      	lsls	r1, r3, #14
 8001324:	f140 815b 	bpl.w	80015de <HAL_RCCEx_PeriphCLKConfig+0x372>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001328:	4f2e      	ldr	r7, [pc, #184]	; (80013e4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800132a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800132c:	00da      	lsls	r2, r3, #3
 800132e:	d455      	bmi.n	80013dc <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001330:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001336:	65bb      	str	r3, [r7, #88]	; 0x58
 8001338:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001342:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001346:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80013e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800134a:	f8d9 3000 	ldr.w	r3, [r9]
 800134e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001352:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8001356:	f7ff f8f5 	bl	8000544 <HAL_GetTick>
 800135a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 800135c:	f8d9 3000 	ldr.w	r3, [r9]
 8001360:	05db      	lsls	r3, r3, #23
 8001362:	d543      	bpl.n	80013ec <HAL_RCCEx_PeriphCLKConfig+0x180>
    if(ret == HAL_OK)
 8001364:	2d00      	cmp	r5, #0
 8001366:	d148      	bne.n	80013fa <HAL_RCCEx_PeriphCLKConfig+0x18e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001368:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800136c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001370:	d015      	beq.n	800139e <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001372:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001376:	4293      	cmp	r3, r2
 8001378:	d011      	beq.n	800139e <HAL_RCCEx_PeriphCLKConfig+0x132>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800137a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800137e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001382:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001386:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800138a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800138e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001392:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001396:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800139a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800139e:	07d8      	lsls	r0, r3, #31
 80013a0:	d509      	bpl.n	80013b6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
        tickstart = HAL_GetTick();
 80013a2:	f7ff f8cf 	bl	8000544 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80013aa:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80013ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013b0:	0799      	lsls	r1, r3, #30
 80013b2:	f140 810d 	bpl.w	80015d0 <HAL_RCCEx_PeriphCLKConfig+0x364>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80013b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013ba:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80013be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013c2:	4313      	orrs	r3, r2
 80013c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80013c8:	4635      	mov	r5, r6
 80013ca:	e016      	b.n	80013fa <HAL_RCCEx_PeriphCLKConfig+0x18e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80013cc:	2100      	movs	r1, #0
 80013ce:	f104 0020 	add.w	r0, r4, #32
 80013d2:	f7ff fecd 	bl	8001170 <RCCEx_PLLSAI2_Config>
 80013d6:	e797      	b.n	8001308 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80013d8:	462e      	mov	r6, r5
 80013da:	e7a1      	b.n	8001320 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 80013dc:	f04f 0800 	mov.w	r8, #0
 80013e0:	e7b1      	b.n	8001346 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ec:	f7ff f8aa 	bl	8000544 <HAL_GetTick>
 80013f0:	eba0 000a 	sub.w	r0, r0, sl
 80013f4:	2802      	cmp	r0, #2
 80013f6:	d9b1      	bls.n	800135c <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 80013f8:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80013fa:	f1b8 0f00 	cmp.w	r8, #0
 80013fe:	d003      	beq.n	8001408 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001406:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001408:	6823      	ldr	r3, [r4, #0]
 800140a:	07da      	lsls	r2, r3, #31
 800140c:	d508      	bpl.n	8001420 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800140e:	498a      	ldr	r1, [pc, #552]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001410:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001412:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001416:	f022 0203 	bic.w	r2, r2, #3
 800141a:	4302      	orrs	r2, r0
 800141c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001420:	079f      	lsls	r7, r3, #30
 8001422:	d508      	bpl.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001424:	4984      	ldr	r1, [pc, #528]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001426:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001428:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800142c:	f022 020c 	bic.w	r2, r2, #12
 8001430:	4302      	orrs	r2, r0
 8001432:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001436:	075e      	lsls	r6, r3, #29
 8001438:	d508      	bpl.n	800144c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800143a:	497f      	ldr	r1, [pc, #508]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800143c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800143e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001442:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001446:	4302      	orrs	r2, r0
 8001448:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800144c:	0718      	lsls	r0, r3, #28
 800144e:	d508      	bpl.n	8001462 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001450:	4979      	ldr	r1, [pc, #484]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001452:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001454:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001458:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800145c:	4302      	orrs	r2, r0
 800145e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001462:	06d9      	lsls	r1, r3, #27
 8001464:	d508      	bpl.n	8001478 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001466:	4974      	ldr	r1, [pc, #464]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001468:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800146a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800146e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001472:	4302      	orrs	r2, r0
 8001474:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001478:	069a      	lsls	r2, r3, #26
 800147a:	d508      	bpl.n	800148e <HAL_RCCEx_PeriphCLKConfig+0x222>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800147c:	496e      	ldr	r1, [pc, #440]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800147e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001480:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001484:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001488:	4302      	orrs	r2, r0
 800148a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800148e:	059f      	lsls	r7, r3, #22
 8001490:	d508      	bpl.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001492:	4969      	ldr	r1, [pc, #420]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001494:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001496:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800149a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800149e:	4302      	orrs	r2, r0
 80014a0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80014a4:	055e      	lsls	r6, r3, #21
 80014a6:	d508      	bpl.n	80014ba <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80014a8:	4963      	ldr	r1, [pc, #396]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014aa:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80014ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80014b0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80014b4:	4302      	orrs	r2, r0
 80014b6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80014ba:	0658      	lsls	r0, r3, #25
 80014bc:	d508      	bpl.n	80014d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80014be:	495e      	ldr	r1, [pc, #376]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014c0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80014c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80014c6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80014ca:	4302      	orrs	r2, r0
 80014cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80014d0:	0619      	lsls	r1, r3, #24
 80014d2:	d508      	bpl.n	80014e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80014d4:	4958      	ldr	r1, [pc, #352]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80014d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80014dc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80014e0:	4302      	orrs	r2, r0
 80014e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80014e6:	05da      	lsls	r2, r3, #23
 80014e8:	d508      	bpl.n	80014fc <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80014ea:	4953      	ldr	r1, [pc, #332]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80014f2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80014f6:	4302      	orrs	r2, r0
 80014f8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80014fc:	049b      	lsls	r3, r3, #18
 80014fe:	d50f      	bpl.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001500:	4a4d      	ldr	r2, [pc, #308]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001502:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001504:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001508:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800150c:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800150e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001512:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001516:	d164      	bne.n	80015e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001518:	68d3      	ldr	r3, [r2, #12]
 800151a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800151e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	031f      	lsls	r7, r3, #12
 8001524:	d50f      	bpl.n	8001546 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001526:	4a44      	ldr	r2, [pc, #272]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001528:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800152a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800152e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001532:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001534:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800153c:	d15c      	bne.n	80015f8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800153e:	68d3      	ldr	r3, [r2, #12]
 8001540:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001544:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	035e      	lsls	r6, r3, #13
 800154a:	d50f      	bpl.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x300>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800154c:	4a3a      	ldr	r2, [pc, #232]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800154e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001550:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001554:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001558:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800155a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800155e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001562:	d154      	bne.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001564:	68d3      	ldr	r3, [r2, #12]
 8001566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800156a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	0458      	lsls	r0, r3, #17
 8001570:	d512      	bpl.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001572:	4931      	ldr	r1, [pc, #196]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001574:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001576:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800157a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800157e:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001580:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001588:	d14c      	bne.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800158a:	2102      	movs	r1, #2
 800158c:	1d20      	adds	r0, r4, #4
 800158e:	f7ff fd61 	bl	8001054 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001592:	2800      	cmp	r0, #0
 8001594:	bf18      	it	ne
 8001596:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001598:	6822      	ldr	r2, [r4, #0]
 800159a:	0411      	lsls	r1, r2, #16
 800159c:	d508      	bpl.n	80015b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800159e:	4926      	ldr	r1, [pc, #152]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80015a0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80015a2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80015a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80015aa:	4303      	orrs	r3, r0
 80015ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80015b0:	03d3      	lsls	r3, r2, #15
 80015b2:	d509      	bpl.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80015b4:	4a20      	ldr	r2, [pc, #128]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80015b6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80015ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80015be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015c2:	430b      	orrs	r3, r1
 80015c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80015c8:	4628      	mov	r0, r5
 80015ca:	b002      	add	sp, #8
 80015cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d0:	f7fe ffb8 	bl	8000544 <HAL_GetTick>
 80015d4:	1b40      	subs	r0, r0, r5
 80015d6:	4548      	cmp	r0, r9
 80015d8:	f67f aee8 	bls.w	80013ac <HAL_RCCEx_PeriphCLKConfig+0x140>
 80015dc:	e70c      	b.n	80013f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80015de:	4635      	mov	r5, r6
 80015e0:	e712      	b.n	8001408 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80015e2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80015e6:	d19b      	bne.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80015e8:	2101      	movs	r1, #1
 80015ea:	1d20      	adds	r0, r4, #4
 80015ec:	f7ff fd32 	bl	8001054 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80015f0:	2800      	cmp	r0, #0
 80015f2:	bf18      	it	ne
 80015f4:	4605      	movne	r5, r0
 80015f6:	e793      	b.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80015f8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80015fc:	d1a3      	bne.n	8001546 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80015fe:	2101      	movs	r1, #1
 8001600:	1d20      	adds	r0, r4, #4
 8001602:	f7ff fd27 	bl	8001054 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001606:	2800      	cmp	r0, #0
 8001608:	bf18      	it	ne
 800160a:	4605      	movne	r5, r0
 800160c:	e79b      	b.n	8001546 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800160e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001612:	d1ab      	bne.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x300>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001614:	2101      	movs	r1, #1
 8001616:	1d20      	adds	r0, r4, #4
 8001618:	f7ff fd1c 	bl	8001054 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800161c:	2800      	cmp	r0, #0
 800161e:	bf18      	it	ne
 8001620:	4605      	movne	r5, r0
 8001622:	e7a3      	b.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x300>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001624:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001628:	d1b6      	bne.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800162a:	2102      	movs	r1, #2
 800162c:	f104 0020 	add.w	r0, r4, #32
 8001630:	f7ff fd9e 	bl	8001170 <RCCEx_PLLSAI2_Config>
 8001634:	e7ad      	b.n	8001592 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000

0800163c <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800163c:	6803      	ldr	r3, [r0, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001646:	6842      	ldr	r2, [r0, #4]
 8001648:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800164c:	d10a      	bne.n	8001664 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 800164e:	6882      	ldr	r2, [r0, #8]
 8001650:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001654:	d002      	beq.n	800165c <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001656:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800165a:	d103      	bne.n	8001664 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001662:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001664:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001666:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800166a:	d107      	bne.n	800167c <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800167a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800167c:	2301      	movs	r3, #1
 800167e:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001682:	2300      	movs	r3, #0
 8001684:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8001688:	2003      	movs	r0, #3
 800168a:	4770      	bx	lr

0800168c <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 800168c:	b570      	push	{r4, r5, r6, lr}
 800168e:	4605      	mov	r5, r0
 8001690:	460c      	mov	r4, r1
 8001692:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	6898      	ldr	r0, [r3, #8]
 8001698:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800169c:	d00d      	beq.n	80016ba <SPI_WaitFlagStateUntilTimeout.constprop.10+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 800169e:	1c62      	adds	r2, r4, #1
 80016a0:	d0f9      	beq.n	8001696 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80016a2:	b924      	cbnz	r4, 80016ae <SPI_WaitFlagStateUntilTimeout.constprop.10+0x22>
 80016a4:	4628      	mov	r0, r5
}
 80016a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80016aa:	f7ff bfc7 	b.w	800163c <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80016ae:	f7fe ff49 	bl	8000544 <HAL_GetTick>
 80016b2:	1b80      	subs	r0, r0, r6
 80016b4:	4284      	cmp	r4, r0
 80016b6:	d8ed      	bhi.n	8001694 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 80016b8:	e7f4      	b.n	80016a4 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x18>
}
 80016ba:	bd70      	pop	{r4, r5, r6, pc}

080016bc <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80016bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016be:	4606      	mov	r6, r0
 80016c0:	460c      	mov	r4, r1
 80016c2:	4615      	mov	r5, r2
 80016c4:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80016c6:	6831      	ldr	r1, [r6, #0]
 80016c8:	6888      	ldr	r0, [r1, #8]
 80016ca:	4020      	ands	r0, r4
 80016cc:	d00e      	beq.n	80016ec <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80016ce:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80016d2:	bf01      	itttt	eq
 80016d4:	7b0a      	ldrbeq	r2, [r1, #12]
 80016d6:	b2d2      	uxtbeq	r2, r2
 80016d8:	f88d 2007 	strbeq.w	r2, [sp, #7]
      UNUSED(tmpreg);
 80016dc:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 80016e0:	1c6b      	adds	r3, r5, #1
 80016e2:	d0f1      	beq.n	80016c8 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80016e4:	b925      	cbnz	r5, 80016f0 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 80016e6:	4630      	mov	r0, r6
 80016e8:	f7ff ffa8 	bl	800163c <SPI_WaitFifoStateUntilTimeout.part.1>
}
 80016ec:	b003      	add	sp, #12
 80016ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80016f0:	f7fe ff28 	bl	8000544 <HAL_GetTick>
 80016f4:	1bc0      	subs	r0, r0, r7
 80016f6:	4285      	cmp	r5, r0
 80016f8:	d8e5      	bhi.n	80016c6 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 80016fa:	e7f4      	b.n	80016e6 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

080016fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80016fc:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80016fe:	4613      	mov	r3, r2
{
 8001700:	460d      	mov	r5, r1
 8001702:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001704:	460a      	mov	r2, r1
 8001706:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800170a:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800170c:	f7ff ffd6 	bl	80016bc <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001710:	b128      	cbz	r0, 800171e <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001712:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001714:	f043 0320 	orr.w	r3, r3, #32
 8001718:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800171a:	2003      	movs	r0, #3
 800171c:	e00f      	b.n	800173e <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800171e:	4632      	mov	r2, r6
 8001720:	4629      	mov	r1, r5
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff ffb2 	bl	800168c <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8001728:	2800      	cmp	r0, #0
 800172a:	d1f2      	bne.n	8001712 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800172c:	4633      	mov	r3, r6
 800172e:	462a      	mov	r2, r5
 8001730:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001734:	4620      	mov	r0, r4
 8001736:	f7ff ffc1 	bl	80016bc <SPI_WaitFifoStateUntilTimeout.constprop.11>
 800173a:	2800      	cmp	r0, #0
 800173c:	d1e9      	bne.n	8001712 <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800173e:	bd70      	pop	{r4, r5, r6, pc}

08001740 <HAL_SPI_Init>:
{
 8001740:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8001742:	4604      	mov	r4, r0
 8001744:	2800      	cmp	r0, #0
 8001746:	d04a      	beq.n	80017de <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800174c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001750:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001754:	b91b      	cbnz	r3, 800175e <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001756:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800175a:	f001 f8c1 	bl	80028e0 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800175e:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001760:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001762:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001766:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001768:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800176a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800176e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001772:	600b      	str	r3, [r1, #0]
 8001774:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001778:	d92e      	bls.n	80017d8 <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800177a:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800177c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001780:	bf18      	it	ne
 8001782:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001784:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001786:	b92b      	cbnz	r3, 8001794 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001788:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800178c:	bf8c      	ite	hi
 800178e:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001790:	2301      	movls	r3, #1
 8001792:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001794:	68a6      	ldr	r6, [r4, #8]
 8001796:	6863      	ldr	r3, [r4, #4]
 8001798:	69a5      	ldr	r5, [r4, #24]
 800179a:	4333      	orrs	r3, r6
 800179c:	6926      	ldr	r6, [r4, #16]
 800179e:	4333      	orrs	r3, r6
 80017a0:	6966      	ldr	r6, [r4, #20]
 80017a2:	4333      	orrs	r3, r6
 80017a4:	69e6      	ldr	r6, [r4, #28]
 80017a6:	4333      	orrs	r3, r6
 80017a8:	6a26      	ldr	r6, [r4, #32]
 80017aa:	4333      	orrs	r3, r6
 80017ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80017ae:	4333      	orrs	r3, r6
 80017b0:	f405 7600 	and.w	r6, r5, #512	; 0x200
 80017b4:	4333      	orrs	r3, r6
 80017b6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80017b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017ba:	431a      	orrs	r2, r3
 80017bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017be:	0c2d      	lsrs	r5, r5, #16
 80017c0:	431a      	orrs	r2, r3
 80017c2:	f005 0504 	and.w	r5, r5, #4
 80017c6:	432a      	orrs	r2, r5
 80017c8:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 80017ca:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017cc:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80017ce:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017d0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80017d2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 80017d6:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80017d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80017dc:	e7d0      	b.n	8001780 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 80017de:	2001      	movs	r0, #1
}
 80017e0:	bd70      	pop	{r4, r5, r6, pc}

080017e2 <HAL_SPI_Transmit>:
{
 80017e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80017e6:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80017e8:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80017ec:	2b01      	cmp	r3, #1
{
 80017ee:	4604      	mov	r4, r0
 80017f0:	460d      	mov	r5, r1
 80017f2:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80017f4:	f000 80b1 	beq.w	800195a <HAL_SPI_Transmit+0x178>
 80017f8:	2301      	movs	r3, #1
 80017fa:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80017fe:	f7fe fea1 	bl	8000544 <HAL_GetTick>
 8001802:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001804:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001808:	b2c0      	uxtb	r0, r0
 800180a:	2801      	cmp	r0, #1
 800180c:	f040 80a3 	bne.w	8001956 <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 8001810:	2d00      	cmp	r5, #0
 8001812:	d057      	beq.n	80018c4 <HAL_SPI_Transmit+0xe2>
 8001814:	f1b8 0f00 	cmp.w	r8, #0
 8001818:	d054      	beq.n	80018c4 <HAL_SPI_Transmit+0xe2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800181a:	2303      	movs	r3, #3
 800181c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001820:	2300      	movs	r3, #0
 8001822:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001824:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8001826:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 800182a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800182e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001832:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001834:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001836:	68a3      	ldr	r3, [r4, #8]
 8001838:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800183a:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800183c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001840:	bf08      	it	eq
 8001842:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8001844:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8001848:	bf04      	itt	eq
 800184a:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 800184e:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001850:	6803      	ldr	r3, [r0, #0]
 8001852:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001854:	bf5e      	ittt	pl
 8001856:	6803      	ldrpl	r3, [r0, #0]
 8001858:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800185c:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800185e:	68e3      	ldr	r3, [r4, #12]
 8001860:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001864:	6863      	ldr	r3, [r4, #4]
 8001866:	d93e      	bls.n	80018e6 <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001868:	b11b      	cbz	r3, 8001872 <HAL_SPI_Transmit+0x90>
 800186a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800186c:	b29b      	uxth	r3, r3
 800186e:	2b01      	cmp	r3, #1
 8001870:	d106      	bne.n	8001880 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)pData);
 8001872:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001876:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8001878:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800187a:	3b01      	subs	r3, #1
 800187c:	b29b      	uxth	r3, r3
 800187e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001880:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001882:	b29b      	uxth	r3, r3
 8001884:	b9a3      	cbnz	r3, 80018b0 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001886:	463a      	mov	r2, r7
 8001888:	4631      	mov	r1, r6
 800188a:	4620      	mov	r0, r4
 800188c:	f7ff ff36 	bl	80016fc <SPI_EndRxTxTransaction>
 8001890:	2800      	cmp	r0, #0
 8001892:	d15d      	bne.n	8001950 <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001894:	68a3      	ldr	r3, [r4, #8]
 8001896:	b933      	cbnz	r3, 80018a6 <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	6823      	ldr	r3, [r4, #0]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	9201      	str	r2, [sp, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80018a6:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 80018a8:	3000      	adds	r0, #0
 80018aa:	bf18      	it	ne
 80018ac:	2001      	movne	r0, #1
 80018ae:	e009      	b.n	80018c4 <HAL_SPI_Transmit+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80018b0:	6823      	ldr	r3, [r4, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	0790      	lsls	r0, r2, #30
 80018b6:	d503      	bpl.n	80018c0 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)pData);
 80018b8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	e7db      	b.n	8001878 <HAL_SPI_Transmit+0x96>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80018c0:	b94e      	cbnz	r6, 80018d6 <HAL_SPI_Transmit+0xf4>
          errorcode = HAL_TIMEOUT;
 80018c2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80018c4:	2301      	movs	r3, #1
 80018c6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80018ca:	2300      	movs	r3, #0
 80018cc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80018d0:	b002      	add	sp, #8
 80018d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80018d6:	1c71      	adds	r1, r6, #1
 80018d8:	d0d2      	beq.n	8001880 <HAL_SPI_Transmit+0x9e>
 80018da:	f7fe fe33 	bl	8000544 <HAL_GetTick>
 80018de:	1bc0      	subs	r0, r0, r7
 80018e0:	4286      	cmp	r6, r0
 80018e2:	d8cd      	bhi.n	8001880 <HAL_SPI_Transmit+0x9e>
 80018e4:	e7ed      	b.n	80018c2 <HAL_SPI_Transmit+0xe0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80018e6:	b11b      	cbz	r3, 80018f0 <HAL_SPI_Transmit+0x10e>
 80018e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d10a      	bne.n	8001906 <HAL_SPI_Transmit+0x124>
      if (hspi->TxXferCount > 1U)
 80018f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d916      	bls.n	8001926 <HAL_SPI_Transmit+0x144>
        hspi->Instance->DR = *((uint16_t *)pData);
 80018f8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80018fc:	60c3      	str	r3, [r0, #12]
          hspi->TxXferCount -= 2U;
 80018fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001900:	3b02      	subs	r3, #2
 8001902:	b29b      	uxth	r3, r3
 8001904:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001906:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001908:	b29b      	uxth	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0bb      	beq.n	8001886 <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	0792      	lsls	r2, r2, #30
 8001914:	d512      	bpl.n	800193c <HAL_SPI_Transmit+0x15a>
        if (hspi->TxXferCount > 1U)
 8001916:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001918:	b292      	uxth	r2, r2
 800191a:	2a01      	cmp	r2, #1
 800191c:	d90b      	bls.n	8001936 <HAL_SPI_Transmit+0x154>
          hspi->Instance->DR = *((uint16_t *)pData);
 800191e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	e7eb      	b.n	80018fe <HAL_SPI_Transmit+0x11c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001926:	782b      	ldrb	r3, [r5, #0]
 8001928:	7303      	strb	r3, [r0, #12]
          hspi->TxXferCount--;
 800192a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800192c:	3b01      	subs	r3, #1
 800192e:	b29b      	uxth	r3, r3
 8001930:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001932:	3501      	adds	r5, #1
 8001934:	e7e7      	b.n	8001906 <HAL_SPI_Transmit+0x124>
 8001936:	782a      	ldrb	r2, [r5, #0]
 8001938:	731a      	strb	r2, [r3, #12]
 800193a:	e7f6      	b.n	800192a <HAL_SPI_Transmit+0x148>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800193c:	2e00      	cmp	r6, #0
 800193e:	d0c0      	beq.n	80018c2 <HAL_SPI_Transmit+0xe0>
 8001940:	1c73      	adds	r3, r6, #1
 8001942:	d0e0      	beq.n	8001906 <HAL_SPI_Transmit+0x124>
 8001944:	f7fe fdfe 	bl	8000544 <HAL_GetTick>
 8001948:	1bc0      	subs	r0, r0, r7
 800194a:	4286      	cmp	r6, r0
 800194c:	d8db      	bhi.n	8001906 <HAL_SPI_Transmit+0x124>
 800194e:	e7b8      	b.n	80018c2 <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001950:	2320      	movs	r3, #32
 8001952:	6623      	str	r3, [r4, #96]	; 0x60
 8001954:	e79e      	b.n	8001894 <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 8001956:	2002      	movs	r0, #2
 8001958:	e7b4      	b.n	80018c4 <HAL_SPI_Transmit+0xe2>
  __HAL_LOCK(hspi);
 800195a:	2002      	movs	r0, #2
 800195c:	e7b8      	b.n	80018d0 <HAL_SPI_Transmit+0xee>

0800195e <HAL_SPI_TransmitReceive>:
{
 800195e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001962:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8001964:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8001968:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 800196c:	2b01      	cmp	r3, #1
{
 800196e:	4604      	mov	r4, r0
 8001970:	460d      	mov	r5, r1
 8001972:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 8001974:	f000 8112 	beq.w	8001b9c <HAL_SPI_TransmitReceive+0x23e>
 8001978:	2301      	movs	r3, #1
 800197a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800197e:	f7fe fde1 	bl	8000544 <HAL_GetTick>
  tmp  = hspi->State;
 8001982:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 8001986:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8001988:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800198a:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800198c:	4681      	mov	r9, r0
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800198e:	d00a      	beq.n	80019a6 <HAL_SPI_TransmitReceive+0x48>
 8001990:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001994:	f040 8100 	bne.w	8001b98 <HAL_SPI_TransmitReceive+0x23a>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001998:	68a2      	ldr	r2, [r4, #8]
 800199a:	2a00      	cmp	r2, #0
 800199c:	f040 80fc 	bne.w	8001b98 <HAL_SPI_TransmitReceive+0x23a>
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	f040 80f9 	bne.w	8001b98 <HAL_SPI_TransmitReceive+0x23a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80019a6:	2d00      	cmp	r5, #0
 80019a8:	d04b      	beq.n	8001a42 <HAL_SPI_TransmitReceive+0xe4>
 80019aa:	2e00      	cmp	r6, #0
 80019ac:	d049      	beq.n	8001a42 <HAL_SPI_TransmitReceive+0xe4>
 80019ae:	2f00      	cmp	r7, #0
 80019b0:	d047      	beq.n	8001a42 <HAL_SPI_TransmitReceive+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80019b2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80019b6:	68e0      	ldr	r0, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80019b8:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80019ba:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80019bc:	bf1c      	itt	ne
 80019be:	2305      	movne	r3, #5
 80019c0:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019c4:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80019c6:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019ca:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 80019cc:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 80019ce:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80019d2:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 80019d4:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80019d8:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80019da:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80019dc:	87a7      	strh	r7, [r4, #60]	; 0x3c
 80019de:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80019e0:	d804      	bhi.n	80019ec <HAL_SPI_TransmitReceive+0x8e>
 80019e2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80019e6:	b292      	uxth	r2, r2
 80019e8:	2a01      	cmp	r2, #1
 80019ea:	d92c      	bls.n	8001a46 <HAL_SPI_TransmitReceive+0xe8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80019f2:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80019f8:	bf5e      	ittt	pl
 80019fa:	681a      	ldrpl	r2, [r3, #0]
 80019fc:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001a00:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a02:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8001a06:	d956      	bls.n	8001ab6 <HAL_SPI_TransmitReceive+0x158>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001a08:	b119      	cbz	r1, 8001a12 <HAL_SPI_TransmitReceive+0xb4>
 8001a0a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001a0c:	b292      	uxth	r2, r2
 8001a0e:	2a01      	cmp	r2, #1
 8001a10:	d106      	bne.n	8001a20 <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001a12:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001a16:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001a18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001a20:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a22:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	b993      	cbnz	r3, 8001a4e <HAL_SPI_TransmitReceive+0xf0>
 8001a28:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b973      	cbnz	r3, 8001a4e <HAL_SPI_TransmitReceive+0xf0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a30:	464a      	mov	r2, r9
 8001a32:	4641      	mov	r1, r8
 8001a34:	4620      	mov	r0, r4
 8001a36:	f7ff fe61 	bl	80016fc <SPI_EndRxTxTransaction>
 8001a3a:	2800      	cmp	r0, #0
 8001a3c:	d033      	beq.n	8001aa6 <HAL_SPI_TransmitReceive+0x148>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a3e:	2320      	movs	r3, #32
 8001a40:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8001a42:	2001      	movs	r0, #1
 8001a44:	e02f      	b.n	8001aa6 <HAL_SPI_TransmitReceive+0x148>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a4c:	e7d1      	b.n	80019f2 <HAL_SPI_TransmitReceive+0x94>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001a4e:	b177      	cbz	r7, 8001a6e <HAL_SPI_TransmitReceive+0x110>
 8001a50:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	b15b      	cbz	r3, 8001a6e <HAL_SPI_TransmitReceive+0x110>
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	0792      	lsls	r2, r2, #30
 8001a5c:	d507      	bpl.n	8001a6e <HAL_SPI_TransmitReceive+0x110>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001a5e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001a62:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001a64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8001a6c:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001a6e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	b16b      	cbz	r3, 8001a92 <HAL_SPI_TransmitReceive+0x134>
 8001a76:	6823      	ldr	r3, [r4, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	07d0      	lsls	r0, r2, #31
 8001a7c:	d509      	bpl.n	8001a92 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001a84:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8001a90:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001a92:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001a96:	d0c4      	beq.n	8001a22 <HAL_SPI_TransmitReceive+0xc4>
 8001a98:	f7fe fd54 	bl	8000544 <HAL_GetTick>
 8001a9c:	eba0 0009 	sub.w	r0, r0, r9
 8001aa0:	4580      	cmp	r8, r0
 8001aa2:	d8be      	bhi.n	8001a22 <HAL_SPI_TransmitReceive+0xc4>
        errorcode = HAL_TIMEOUT;
 8001aa4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001aac:	2300      	movs	r3, #0
 8001aae:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8001ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001ab6:	b119      	cbz	r1, 8001ac0 <HAL_SPI_TransmitReceive+0x162>
 8001ab8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001aba:	b292      	uxth	r2, r2
 8001abc:	2a01      	cmp	r2, #1
 8001abe:	d10a      	bne.n	8001ad6 <HAL_SPI_TransmitReceive+0x178>
      if (hspi->TxXferCount > 1U)
 8001ac0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001ac2:	b292      	uxth	r2, r2
 8001ac4:	2a01      	cmp	r2, #1
 8001ac6:	d94d      	bls.n	8001b64 <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001ac8:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001acc:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8001ace:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ad0:	3b02      	subs	r3, #2
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001ad6:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ad8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	b923      	cbnz	r3, 8001ae8 <HAL_SPI_TransmitReceive+0x18a>
 8001ade:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0a3      	beq.n	8001a30 <HAL_SPI_TransmitReceive+0xd2>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001ae8:	b197      	cbz	r7, 8001b10 <HAL_SPI_TransmitReceive+0x1b2>
 8001aea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	b17b      	cbz	r3, 8001b10 <HAL_SPI_TransmitReceive+0x1b2>
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	0791      	lsls	r1, r2, #30
 8001af6:	d50b      	bpl.n	8001b10 <HAL_SPI_TransmitReceive+0x1b2>
        if (hspi->TxXferCount > 1U)
 8001af8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001afa:	b292      	uxth	r2, r2
 8001afc:	2a01      	cmp	r2, #1
 8001afe:	d939      	bls.n	8001b74 <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8001b00:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001b04:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8001b06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b08:	3b02      	subs	r3, #2
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8001b0e:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001b10:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	b1db      	cbz	r3, 8001b50 <HAL_SPI_TransmitReceive+0x1f2>
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	07d2      	lsls	r2, r2, #31
 8001b1e:	d517      	bpl.n	8001b50 <HAL_SPI_TransmitReceive+0x1f2>
        if (hspi->RxXferCount > 1U)
 8001b20:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8001b24:	b292      	uxth	r2, r2
 8001b26:	2a01      	cmp	r2, #1
 8001b28:	d92c      	bls.n	8001b84 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	f826 2b02 	strh.w	r2, [r6], #2
          hspi->RxXferCount -= 2U;
 8001b30:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8001b34:	3a02      	subs	r2, #2
 8001b36:	b292      	uxth	r2, r2
 8001b38:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8001b3c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8001b40:	b292      	uxth	r2, r2
 8001b42:	2a01      	cmp	r2, #1
 8001b44:	d803      	bhi.n	8001b4e <HAL_SPI_TransmitReceive+0x1f0>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b4c:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 8001b4e:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001b50:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001b54:	d0c0      	beq.n	8001ad8 <HAL_SPI_TransmitReceive+0x17a>
 8001b56:	f7fe fcf5 	bl	8000544 <HAL_GetTick>
 8001b5a:	eba0 0009 	sub.w	r0, r0, r9
 8001b5e:	4580      	cmp	r8, r0
 8001b60:	d8ba      	bhi.n	8001ad8 <HAL_SPI_TransmitReceive+0x17a>
 8001b62:	e79f      	b.n	8001aa4 <HAL_SPI_TransmitReceive+0x146>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001b64:	782a      	ldrb	r2, [r5, #0]
 8001b66:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001b68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001b70:	3501      	adds	r5, #1
 8001b72:	e7b0      	b.n	8001ad6 <HAL_SPI_TransmitReceive+0x178>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001b74:	782a      	ldrb	r2, [r5, #0]
 8001b76:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8001b78:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001b80:	3501      	adds	r5, #1
 8001b82:	e7c4      	b.n	8001b0e <HAL_SPI_TransmitReceive+0x1b0>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001b84:	7b1b      	ldrb	r3, [r3, #12]
 8001b86:	7033      	strb	r3, [r6, #0]
          hspi->RxXferCount--;
 8001b88:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001b94:	3601      	adds	r6, #1
 8001b96:	e7da      	b.n	8001b4e <HAL_SPI_TransmitReceive+0x1f0>
    errorcode = HAL_BUSY;
 8001b98:	2002      	movs	r0, #2
 8001b9a:	e784      	b.n	8001aa6 <HAL_SPI_TransmitReceive+0x148>
  __HAL_LOCK(hspi);
 8001b9c:	2002      	movs	r0, #2
}
 8001b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001ba2 <UART_EndRxTransfer>:
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ba2:	6803      	ldr	r3, [r0, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001baa:	601a      	str	r2, [r3, #0]
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001bb4:	2320      	movs	r3, #32
 8001bb6:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
  
  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	6603      	str	r3, [r0, #96]	; 0x60
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_UART_TxCpltCallback>:
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_UART_ErrorCallback>:
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001bc4:	6803      	ldr	r3, [r0, #0]
 8001bc6:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bc8:	6819      	ldr	r1, [r3, #0]
{
 8001bca:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001bcc:	0716      	lsls	r6, r2, #28
{
 8001bce:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001bd0:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8001bd2:	d10a      	bne.n	8001bea <HAL_UART_IRQHandler+0x26>
    if(((isrflags & USART_ISR_RXNE) != RESET)
 8001bd4:	0696      	lsls	r6, r2, #26
 8001bd6:	d565      	bpl.n	8001ca4 <HAL_UART_IRQHandler+0xe0>
       && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bd8:	068e      	lsls	r6, r1, #26
 8001bda:	d563      	bpl.n	8001ca4 <HAL_UART_IRQHandler+0xe0>
      if (huart->RxISR != NULL) {huart->RxISR(huart);}
 8001bdc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8089 	beq.w	8001cf6 <HAL_UART_IRQHandler+0x132>
}
 8001be4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 8001be8:	4718      	bx	r3
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8001bea:	f015 0001 	ands.w	r0, r5, #1
 8001bee:	d102      	bne.n	8001bf6 <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8001bf0:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001bf4:	d056      	beq.n	8001ca4 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001bf6:	07d5      	lsls	r5, r2, #31
 8001bf8:	d507      	bpl.n	8001c0a <HAL_UART_IRQHandler+0x46>
 8001bfa:	05ce      	lsls	r6, r1, #23
 8001bfc:	d505      	bpl.n	8001c0a <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001bfe:	2501      	movs	r5, #1
 8001c00:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c02:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8001c04:	f045 0501 	orr.w	r5, r5, #1
 8001c08:	6765      	str	r5, [r4, #116]	; 0x74
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c0a:	0795      	lsls	r5, r2, #30
 8001c0c:	d506      	bpl.n	8001c1c <HAL_UART_IRQHandler+0x58>
 8001c0e:	b128      	cbz	r0, 8001c1c <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001c10:	2502      	movs	r5, #2
 8001c12:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c14:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8001c16:	f045 0504 	orr.w	r5, r5, #4
 8001c1a:	6765      	str	r5, [r4, #116]	; 0x74
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c1c:	0756      	lsls	r6, r2, #29
 8001c1e:	d506      	bpl.n	8001c2e <HAL_UART_IRQHandler+0x6a>
 8001c20:	b128      	cbz	r0, 8001c2e <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001c22:	2504      	movs	r5, #4
 8001c24:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c26:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8001c28:	f045 0502 	orr.w	r5, r5, #2
 8001c2c:	6765      	str	r5, [r4, #116]	; 0x74
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 8001c2e:	0715      	lsls	r5, r2, #28
 8001c30:	d507      	bpl.n	8001c42 <HAL_UART_IRQHandler+0x7e>
       &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8001c32:	068e      	lsls	r6, r1, #26
 8001c34:	d400      	bmi.n	8001c38 <HAL_UART_IRQHandler+0x74>
 8001c36:	b120      	cbz	r0, 8001c42 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001c38:	2008      	movs	r0, #8
 8001c3a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c3c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001c3e:	4303      	orrs	r3, r0
 8001c40:	6763      	str	r3, [r4, #116]	; 0x74
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c42:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d056      	beq.n	8001cf6 <HAL_UART_IRQHandler+0x132>
      if(((isrflags & USART_ISR_RXNE) != RESET)
 8001c48:	0695      	lsls	r5, r2, #26
 8001c4a:	d505      	bpl.n	8001c58 <HAL_UART_IRQHandler+0x94>
         && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c4c:	0688      	lsls	r0, r1, #26
 8001c4e:	d503      	bpl.n	8001c58 <HAL_UART_IRQHandler+0x94>
        if (huart->RxISR != NULL) {huart->RxISR(huart);}
 8001c50:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001c52:	b10b      	cbz	r3, 8001c58 <HAL_UART_IRQHandler+0x94>
 8001c54:	4620      	mov	r0, r4
 8001c56:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001c58:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001c5a:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 8001c5c:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001c5e:	d404      	bmi.n	8001c6a <HAL_UART_IRQHandler+0xa6>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001c64:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001c68:	d018      	beq.n	8001c9c <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 8001c6a:	f7ff ff9a 	bl	8001ba2 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	0652      	lsls	r2, r2, #25
 8001c74:	d50e      	bpl.n	8001c94 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c76:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001c78:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c7e:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001c80:	b140      	cbz	r0, 8001c94 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_UART_IRQHandler+0x134>)
 8001c84:	6383      	str	r3, [r0, #56]	; 0x38
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c86:	f7fe fcea 	bl	800065e <HAL_DMA_Abort_IT>
 8001c8a:	2800      	cmp	r0, #0
 8001c8c:	d033      	beq.n	8001cf6 <HAL_UART_IRQHandler+0x132>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c8e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001c90:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001c92:	e7a7      	b.n	8001be4 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8001c94:	4620      	mov	r0, r4
 8001c96:	f7ff ff94 	bl	8001bc2 <HAL_UART_ErrorCallback>
 8001c9a:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001c9c:	f7ff ff91 	bl	8001bc2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ca0:	6765      	str	r5, [r4, #116]	; 0x74
 8001ca2:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8001ca4:	02d6      	lsls	r6, r2, #11
 8001ca6:	d50e      	bpl.n	8001cc6 <HAL_UART_IRQHandler+0x102>
 8001ca8:	0268      	lsls	r0, r5, #9
 8001caa:	d50c      	bpl.n	8001cc6 <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cb0:	621a      	str	r2, [r3, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8001cb2:	2320      	movs	r3, #32
 8001cb4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    HAL_UARTEx_WakeupCallback(huart);
 8001cb8:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 8001cba:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
}
 8001cbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8001cc2:	f000 bafd 	b.w	80022c0 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET)
 8001cc6:	0616      	lsls	r6, r2, #24
 8001cc8:	d505      	bpl.n	8001cd6 <HAL_UART_IRQHandler+0x112>
     && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001cca:	060d      	lsls	r5, r1, #24
 8001ccc:	d503      	bpl.n	8001cd6 <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 8001cce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001cd0:	b18b      	cbz	r3, 8001cf6 <HAL_UART_IRQHandler+0x132>
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	e786      	b.n	8001be4 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001cd6:	0650      	lsls	r0, r2, #25
 8001cd8:	d50d      	bpl.n	8001cf6 <HAL_UART_IRQHandler+0x132>
 8001cda:	064a      	lsls	r2, r1, #25
 8001cdc:	d50b      	bpl.n	8001cf6 <HAL_UART_IRQHandler+0x132>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ce4:	601a      	str	r2, [r3, #0]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001ce6:	2320      	movs	r3, #32
 8001ce8:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  
  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	6663      	str	r3, [r4, #100]	; 0x64
  
  HAL_UART_TxCpltCallback(huart);
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f7ff ff65 	bl	8001bc0 <HAL_UART_TxCpltCallback>
 8001cf6:	bd70      	pop	{r4, r5, r6, pc}
 8001cf8:	08001cfd 	.word	0x08001cfd

08001cfc <UART_DMAAbortOnError>:
{
 8001cfc:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001cfe:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001d06:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8001d0a:	f7ff ff5a 	bl	8001bc2 <HAL_UART_ErrorCallback>
 8001d0e:	bd08      	pop	{r3, pc}

08001d10 <UART_SetConfig>:
  if(UART_INSTANCE_LOWPOWER(huart))
 8001d10:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d12:	69c1      	ldr	r1, [r0, #28]
{
 8001d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d16:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d18:	6883      	ldr	r3, [r0, #8]
 8001d1a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d1c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d1e:	4303      	orrs	r3, r0
 8001d20:	6960      	ldr	r0, [r4, #20]
 8001d22:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d24:	48ba      	ldr	r0, [pc, #744]	; (8002010 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d26:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d28:	4028      	ands	r0, r5
 8001d2a:	4303      	orrs	r3, r0
 8001d2c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d2e:	6853      	ldr	r3, [r2, #4]
 8001d30:	68e0      	ldr	r0, [r4, #12]
 8001d32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d36:	4303      	orrs	r3, r0
 8001d38:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001d3a:	4bb6      	ldr	r3, [pc, #728]	; (8002014 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d3c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001d3e:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8001d40:	bf1c      	itt	ne
 8001d42:	6a23      	ldrne	r3, [r4, #32]
 8001d44:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d46:	6893      	ldr	r3, [r2, #8]
 8001d48:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001d4c:	4303      	orrs	r3, r0
 8001d4e:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d50:	4bb1      	ldr	r3, [pc, #708]	; (8002018 <UART_SetConfig+0x308>)
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d119      	bne.n	8001d8a <UART_SetConfig+0x7a>
 8001d56:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001d5a:	4ab0      	ldr	r2, [pc, #704]	; (800201c <UART_SetConfig+0x30c>)
 8001d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d60:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d64:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001d68:	5cd3      	ldrb	r3, [r2, r3]
 8001d6a:	f040 8138 	bne.w	8001fde <UART_SetConfig+0x2ce>
    switch (clocksource)
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	f200 808f 	bhi.w	8001e92 <UART_SetConfig+0x182>
 8001d74:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001d78:	00ca011a 	.word	0x00ca011a
 8001d7c:	008d00f9 	.word	0x008d00f9
 8001d80:	008d0114 	.word	0x008d0114
 8001d84:	008d008d 	.word	0x008d008d
 8001d88:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d8a:	4ba5      	ldr	r3, [pc, #660]	; (8002020 <UART_SetConfig+0x310>)
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d107      	bne.n	8001da0 <UART_SetConfig+0x90>
 8001d90:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001d94:	4aa3      	ldr	r2, [pc, #652]	; (8002024 <UART_SetConfig+0x314>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	e7e1      	b.n	8001d64 <UART_SetConfig+0x54>
 8001da0:	4ba1      	ldr	r3, [pc, #644]	; (8002028 <UART_SetConfig+0x318>)
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d123      	bne.n	8001dee <UART_SetConfig+0xde>
 8001da6:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	f000 80f1 	beq.w	8001f9a <UART_SetConfig+0x28a>
 8001db8:	d80b      	bhi.n	8001dd2 <UART_SetConfig+0xc2>
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 80f3 	beq.w	8001fa6 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dc0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
      ret = HAL_ERROR;
 8001dc4:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001dc8:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dcc:	f000 80f8 	beq.w	8001fc0 <UART_SetConfig+0x2b0>
 8001dd0:	e0a8      	b.n	8001f24 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001dd2:	2b20      	cmp	r3, #32
 8001dd4:	f000 80c6 	beq.w	8001f64 <UART_SetConfig+0x254>
 8001dd8:	2b30      	cmp	r3, #48	; 0x30
 8001dda:	d1f1      	bne.n	8001dc0 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ddc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001de0:	f040 80b8 	bne.w	8001f54 <UART_SetConfig+0x244>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001de4:	6860      	ldr	r0, [r4, #4]
 8001de6:	0843      	lsrs	r3, r0, #1
 8001de8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001dec:	e0c3      	b.n	8001f76 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001dee:	4b8f      	ldr	r3, [pc, #572]	; (800202c <UART_SetConfig+0x31c>)
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d11e      	bne.n	8001e32 <UART_SetConfig+0x122>
 8001df4:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001e00:	2b40      	cmp	r3, #64	; 0x40
 8001e02:	f000 80bb 	beq.w	8001f7c <UART_SetConfig+0x26c>
 8001e06:	d80a      	bhi.n	8001e1e <UART_SetConfig+0x10e>
 8001e08:	b97b      	cbnz	r3, 8001e2a <UART_SetConfig+0x11a>
  if(UART_INSTANCE_LOWPOWER(huart))
 8001e0a:	4b82      	ldr	r3, [pc, #520]	; (8002014 <UART_SetConfig+0x304>)
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	f040 80ca 	bne.w	8001fa6 <UART_SetConfig+0x296>
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001e12:	f7ff f8ff 	bl	8001014 <HAL_RCC_GetPCLK1Freq>
      break;
 8001e16:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8001e18:	bbb0      	cbnz	r0, 8001e88 <UART_SetConfig+0x178>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	e03a      	b.n	8001e94 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e1e:	2b80      	cmp	r3, #128	; 0x80
 8001e20:	f000 809d 	beq.w	8001f5e <UART_SetConfig+0x24e>
 8001e24:	2bc0      	cmp	r3, #192	; 0xc0
 8001e26:	f000 80b0 	beq.w	8001f8a <UART_SetConfig+0x27a>
  if(UART_INSTANCE_LOWPOWER(huart))
 8001e2a:	4b7a      	ldr	r3, [pc, #488]	; (8002014 <UART_SetConfig+0x304>)
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1c7      	bne.n	8001dc0 <UART_SetConfig+0xb0>
 8001e30:	e02f      	b.n	8001e92 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e32:	4b7f      	ldr	r3, [pc, #508]	; (8002030 <UART_SetConfig+0x320>)
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d111      	bne.n	8001e5c <UART_SetConfig+0x14c>
 8001e38:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8001e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e48:	f000 8098 	beq.w	8001f7c <UART_SetConfig+0x26c>
 8001e4c:	d9dc      	bls.n	8001e08 <UART_SetConfig+0xf8>
 8001e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e52:	f000 8084 	beq.w	8001f5e <UART_SetConfig+0x24e>
 8001e56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e5a:	e7e4      	b.n	8001e26 <UART_SetConfig+0x116>
 8001e5c:	4b6d      	ldr	r3, [pc, #436]	; (8002014 <UART_SetConfig+0x304>)
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d1ae      	bne.n	8001dc0 <UART_SetConfig+0xb0>
 8001e62:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e72:	f000 8083 	beq.w	8001f7c <UART_SetConfig+0x26c>
 8001e76:	d9c7      	bls.n	8001e08 <UART_SetConfig+0xf8>
 8001e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e7c:	d06f      	beq.n	8001f5e <UART_SetConfig+0x24e>
 8001e7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001e82:	e7d0      	b.n	8001e26 <UART_SetConfig+0x116>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001e84:	486b      	ldr	r0, [pc, #428]	; (8002034 <UART_SetConfig+0x324>)
  if(UART_INSTANCE_LOWPOWER(huart))
 8001e86:	2302      	movs	r3, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8001e88:	6862      	ldr	r2, [r4, #4]
 8001e8a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001e8e:	4281      	cmp	r1, r0
 8001e90:	d905      	bls.n	8001e9e <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8001e92:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001e98:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8001e9e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001ea2:	d8f6      	bhi.n	8001e92 <UART_SetConfig+0x182>
        switch (clocksource)
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d82e      	bhi.n	8001f06 <UART_SetConfig+0x1f6>
 8001ea8:	e8df f003 	tbb	[pc, r3]
 8001eac:	2d1c2d05 	.word	0x2d1c2d05
 8001eb0:	2d2d2d24 	.word	0x2d2d2d24
 8001eb4:	27          	.byte	0x27
 8001eb5:	00          	.byte	0x00
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001eb6:	f7ff f8ad 	bl	8001014 <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001eba:	6862      	ldr	r2, [r4, #4]
 8001ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ec0:	0856      	lsrs	r6, r2, #1
 8001ec2:	2700      	movs	r7, #0
 8001ec4:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001ec8:	2300      	movs	r3, #0
 8001eca:	4630      	mov	r0, r6
 8001ecc:	4639      	mov	r1, r7
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001ece:	f7fe f983 	bl	80001d8 <__aeabi_uldivmod>
          break;
 8001ed2:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001ed4:	4b58      	ldr	r3, [pc, #352]	; (8002038 <UART_SetConfig+0x328>)
 8001ed6:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001eda:	4299      	cmp	r1, r3
 8001edc:	d8d9      	bhi.n	8001e92 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	60d8      	str	r0, [r3, #12]
 8001ee2:	e7d7      	b.n	8001e94 <UART_SetConfig+0x184>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001ee4:	4855      	ldr	r0, [pc, #340]	; (800203c <UART_SetConfig+0x32c>)
 8001ee6:	0855      	lsrs	r5, r2, #1
 8001ee8:	2300      	movs	r3, #0
 8001eea:	2100      	movs	r1, #0
 8001eec:	1940      	adds	r0, r0, r5
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001eee:	f141 0100 	adc.w	r1, r1, #0
 8001ef2:	e7ec      	b.n	8001ece <UART_SetConfig+0x1be>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ef4:	f7fe fd38 	bl	8000968 <HAL_RCC_GetSysClockFreq>
 8001ef8:	e7df      	b.n	8001eba <UART_SetConfig+0x1aa>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001efa:	0850      	lsrs	r0, r2, #1
 8001efc:	2100      	movs	r1, #0
 8001efe:	2300      	movs	r3, #0
 8001f00:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001f04:	e7f3      	b.n	8001eee <UART_SetConfig+0x1de>
          ret = HAL_ERROR;
 8001f06:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001f08:	2000      	movs	r0, #0
 8001f0a:	e7e3      	b.n	8001ed4 <UART_SetConfig+0x1c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f0c:	f7ff f892 	bl	8001034 <HAL_RCC_GetPCLK2Freq>
 8001f10:	e04e      	b.n	8001fb0 <UART_SetConfig+0x2a0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f12:	f7ff f87f 	bl	8001014 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f16:	6862      	ldr	r2, [r4, #4]
 8001f18:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f20:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f22:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f24:	f1a3 0010 	sub.w	r0, r3, #16
 8001f28:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001f2c:	4288      	cmp	r0, r1
 8001f2e:	d8b0      	bhi.n	8001e92 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8001f30:	6821      	ldr	r1, [r4, #0]
 8001f32:	60cb      	str	r3, [r1, #12]
 8001f34:	e7ae      	b.n	8001e94 <UART_SetConfig+0x184>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f36:	f7ff f87d 	bl	8001034 <HAL_RCC_GetPCLK2Freq>
 8001f3a:	e7ec      	b.n	8001f16 <UART_SetConfig+0x206>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001f3c:	6860      	ldr	r0, [r4, #4]
 8001f3e:	0843      	lsrs	r3, r0, #1
 8001f40:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001f44:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f48:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f4c:	e7e8      	b.n	8001f20 <UART_SetConfig+0x210>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f4e:	f7fe fd0b 	bl	8000968 <HAL_RCC_GetSysClockFreq>
 8001f52:	e7e0      	b.n	8001f16 <UART_SetConfig+0x206>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f54:	6860      	ldr	r0, [r4, #4]
 8001f56:	0843      	lsrs	r3, r0, #1
 8001f58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001f5c:	e7f4      	b.n	8001f48 <UART_SetConfig+0x238>
  if(UART_INSTANCE_LOWPOWER(huart))
 8001f5e:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <UART_SetConfig+0x304>)
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d08f      	beq.n	8001e84 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f64:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001f68:	d1e8      	bne.n	8001f3c <UART_SetConfig+0x22c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001f6a:	6860      	ldr	r0, [r4, #4]
 8001f6c:	0843      	lsrs	r3, r0, #1
 8001f6e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001f72:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f76:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f7a:	e01f      	b.n	8001fbc <UART_SetConfig+0x2ac>
  if(UART_INSTANCE_LOWPOWER(huart))
 8001f7c:	4b25      	ldr	r3, [pc, #148]	; (8002014 <UART_SetConfig+0x304>)
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d10b      	bne.n	8001f9a <UART_SetConfig+0x28a>
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001f82:	f7fe fcf1 	bl	8000968 <HAL_RCC_GetSysClockFreq>
      break;
 8001f86:	2304      	movs	r3, #4
 8001f88:	e746      	b.n	8001e18 <UART_SetConfig+0x108>
  if(UART_INSTANCE_LOWPOWER(huart))
 8001f8a:	4b22      	ldr	r3, [pc, #136]	; (8002014 <UART_SetConfig+0x304>)
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	f47f af25 	bne.w	8001ddc <UART_SetConfig+0xcc>
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001f92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if(UART_INSTANCE_LOWPOWER(huart))
 8001f96:	2308      	movs	r3, #8
 8001f98:	e776      	b.n	8001e88 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f9a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001f9e:	d1d6      	bne.n	8001f4e <UART_SetConfig+0x23e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001fa0:	f7fe fce2 	bl	8000968 <HAL_RCC_GetSysClockFreq>
 8001fa4:	e004      	b.n	8001fb0 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fa6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001faa:	d1b2      	bne.n	8001f12 <UART_SetConfig+0x202>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001fac:	f7ff f832 	bl	8001014 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001fb0:	6861      	ldr	r1, [r4, #4]
 8001fb2:	084a      	lsrs	r2, r1, #1
 8001fb4:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001fb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fbc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fbe:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fc0:	f1a3 0010 	sub.w	r0, r3, #16
 8001fc4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001fc8:	4288      	cmp	r0, r1
 8001fca:	f63f af62 	bhi.w	8001e92 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8001fce:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001fd2:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001fd4:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	60c3      	str	r3, [r0, #12]
 8001fdc:	e75a      	b.n	8001e94 <UART_SetConfig+0x184>
    switch (clocksource)
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	f63f af57 	bhi.w	8001e92 <UART_SetConfig+0x182>
 8001fe4:	a201      	add	r2, pc, #4	; (adr r2, 8001fec <UART_SetConfig+0x2dc>)
 8001fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fea:	bf00      	nop
 8001fec:	08001f13 	.word	0x08001f13
 8001ff0:	08001f37 	.word	0x08001f37
 8001ff4:	08001f3d 	.word	0x08001f3d
 8001ff8:	08001e93 	.word	0x08001e93
 8001ffc:	08001f4f 	.word	0x08001f4f
 8002000:	08001e93 	.word	0x08001e93
 8002004:	08001e93 	.word	0x08001e93
 8002008:	08001e93 	.word	0x08001e93
 800200c:	08001f55 	.word	0x08001f55
 8002010:	efff69f3 	.word	0xefff69f3
 8002014:	40008000 	.word	0x40008000
 8002018:	40013800 	.word	0x40013800
 800201c:	08002a9c 	.word	0x08002a9c
 8002020:	40004400 	.word	0x40004400
 8002024:	08002aa0 	.word	0x08002aa0
 8002028:	40004800 	.word	0x40004800
 800202c:	40004c00 	.word	0x40004c00
 8002030:	40005000 	.word	0x40005000
 8002034:	00f42400 	.word	0x00f42400
 8002038:	000ffcff 	.word	0x000ffcff
 800203c:	f4240000 	.word	0xf4240000

08002040 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002040:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002042:	07da      	lsls	r2, r3, #31
{
 8002044:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002046:	d506      	bpl.n	8002056 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002048:	6801      	ldr	r1, [r0, #0]
 800204a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800204c:	684a      	ldr	r2, [r1, #4]
 800204e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002052:	4322      	orrs	r2, r4
 8002054:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002056:	079c      	lsls	r4, r3, #30
 8002058:	d506      	bpl.n	8002068 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800205a:	6801      	ldr	r1, [r0, #0]
 800205c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800205e:	684a      	ldr	r2, [r1, #4]
 8002060:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002064:	4322      	orrs	r2, r4
 8002066:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002068:	0759      	lsls	r1, r3, #29
 800206a:	d506      	bpl.n	800207a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800206c:	6801      	ldr	r1, [r0, #0]
 800206e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002070:	684a      	ldr	r2, [r1, #4]
 8002072:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002076:	4322      	orrs	r2, r4
 8002078:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800207a:	071a      	lsls	r2, r3, #28
 800207c:	d506      	bpl.n	800208c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800207e:	6801      	ldr	r1, [r0, #0]
 8002080:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002082:	684a      	ldr	r2, [r1, #4]
 8002084:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002088:	4322      	orrs	r2, r4
 800208a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800208c:	06dc      	lsls	r4, r3, #27
 800208e:	d506      	bpl.n	800209e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002090:	6801      	ldr	r1, [r0, #0]
 8002092:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002094:	688a      	ldr	r2, [r1, #8]
 8002096:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800209a:	4322      	orrs	r2, r4
 800209c:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800209e:	0699      	lsls	r1, r3, #26
 80020a0:	d506      	bpl.n	80020b0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020a2:	6801      	ldr	r1, [r0, #0]
 80020a4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80020a6:	688a      	ldr	r2, [r1, #8]
 80020a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ac:	4322      	orrs	r2, r4
 80020ae:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020b0:	065a      	lsls	r2, r3, #25
 80020b2:	d50f      	bpl.n	80020d4 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020b4:	6801      	ldr	r1, [r0, #0]
 80020b6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80020b8:	684a      	ldr	r2, [r1, #4]
 80020ba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80020be:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020c4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020c6:	d105      	bne.n	80020d4 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020c8:	684a      	ldr	r2, [r1, #4]
 80020ca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80020cc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80020d0:	4322      	orrs	r2, r4
 80020d2:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80020d4:	061b      	lsls	r3, r3, #24
 80020d6:	d506      	bpl.n	80020e6 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020d8:	6802      	ldr	r2, [r0, #0]
 80020da:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80020dc:	6853      	ldr	r3, [r2, #4]
 80020de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80020e2:	430b      	orrs	r3, r1
 80020e4:	6053      	str	r3, [r2, #4]
 80020e6:	bd10      	pop	{r4, pc}

080020e8 <UART_WaitOnFlagUntilTimeout>:
{
 80020e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020ec:	9d06      	ldr	r5, [sp, #24]
 80020ee:	4604      	mov	r4, r0
 80020f0:	460f      	mov	r7, r1
 80020f2:	4616      	mov	r6, r2
 80020f4:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f6:	6821      	ldr	r1, [r4, #0]
 80020f8:	69ca      	ldr	r2, [r1, #28]
 80020fa:	ea37 0302 	bics.w	r3, r7, r2
 80020fe:	bf0c      	ite	eq
 8002100:	2201      	moveq	r2, #1
 8002102:	2200      	movne	r2, #0
 8002104:	42b2      	cmp	r2, r6
 8002106:	d002      	beq.n	800210e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002108:	2000      	movs	r0, #0
}
 800210a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800210e:	1c6b      	adds	r3, r5, #1
 8002110:	d0f2      	beq.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002112:	b99d      	cbnz	r5, 800213c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800211c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	f022 0201 	bic.w	r2, r2, #1
 8002124:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002126:	2320      	movs	r3, #32
 8002128:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 800212c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8002130:	2300      	movs	r3, #0
 8002132:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8002136:	2003      	movs	r0, #3
 8002138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800213c:	f7fe fa02 	bl	8000544 <HAL_GetTick>
 8002140:	eba0 0008 	sub.w	r0, r0, r8
 8002144:	4285      	cmp	r5, r0
 8002146:	d2d6      	bcs.n	80020f6 <UART_WaitOnFlagUntilTimeout+0xe>
 8002148:	e7e4      	b.n	8002114 <UART_WaitOnFlagUntilTimeout+0x2c>

0800214a <HAL_UART_Transmit>:
{
 800214a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800214e:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8002150:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002154:	2b20      	cmp	r3, #32
{
 8002156:	4604      	mov	r4, r0
 8002158:	460d      	mov	r5, r1
 800215a:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800215c:	d14a      	bne.n	80021f4 <HAL_UART_Transmit+0xaa>
    if((pData == NULL ) || (Size == 0U))
 800215e:	2900      	cmp	r1, #0
 8002160:	d046      	beq.n	80021f0 <HAL_UART_Transmit+0xa6>
 8002162:	2a00      	cmp	r2, #0
 8002164:	d044      	beq.n	80021f0 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8002166:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800216a:	2b01      	cmp	r3, #1
 800216c:	d042      	beq.n	80021f4 <HAL_UART_Transmit+0xaa>
 800216e:	2301      	movs	r3, #1
 8002170:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002174:	2300      	movs	r3, #0
 8002176:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002178:	2321      	movs	r3, #33	; 0x21
 800217a:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 800217e:	f7fe f9e1 	bl	8000544 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002182:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002186:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002188:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800218c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002190:	9700      	str	r7, [sp, #0]
    while(huart->TxXferCount > 0U)
 8002192:	b292      	uxth	r2, r2
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002194:	4633      	mov	r3, r6
    while(huart->TxXferCount > 0U)
 8002196:	b952      	cbnz	r2, 80021ae <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002198:	2140      	movs	r1, #64	; 0x40
 800219a:	4620      	mov	r0, r4
 800219c:	f7ff ffa4 	bl	80020e8 <UART_WaitOnFlagUntilTimeout>
 80021a0:	b958      	cbnz	r0, 80021ba <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 80021a2:	2320      	movs	r3, #32
 80021a4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 80021a8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 80021ac:	e006      	b.n	80021bc <HAL_UART_Transmit+0x72>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021ae:	2200      	movs	r2, #0
 80021b0:	2180      	movs	r1, #128	; 0x80
 80021b2:	4620      	mov	r0, r4
 80021b4:	f7ff ff98 	bl	80020e8 <UART_WaitOnFlagUntilTimeout>
 80021b8:	b118      	cbz	r0, 80021c2 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 80021ba:	2003      	movs	r0, #3
}
 80021bc:	b002      	add	sp, #8
 80021be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021c2:	68a3      	ldr	r3, [r4, #8]
 80021c4:	6822      	ldr	r2, [r4, #0]
 80021c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ca:	d10d      	bne.n	80021e8 <HAL_UART_Transmit+0x9e>
 80021cc:	6923      	ldr	r3, [r4, #16]
 80021ce:	b95b      	cbnz	r3, 80021e8 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80021d0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80021d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021d8:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80021da:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80021e6:	e7d1      	b.n	800218c <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80021e8:	782b      	ldrb	r3, [r5, #0]
 80021ea:	8513      	strh	r3, [r2, #40]	; 0x28
 80021ec:	3501      	adds	r5, #1
 80021ee:	e7f4      	b.n	80021da <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 80021f0:	2001      	movs	r0, #1
 80021f2:	e7e3      	b.n	80021bc <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 80021f4:	2002      	movs	r0, #2
 80021f6:	e7e1      	b.n	80021bc <HAL_UART_Transmit+0x72>

080021f8 <UART_CheckIdleState>:
{
 80021f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80021fa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fc:	2600      	movs	r6, #0
 80021fe:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8002200:	f7fe f9a0 	bl	8000544 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800220a:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800220c:	d417      	bmi.n	800223e <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	075b      	lsls	r3, r3, #29
 8002214:	d50a      	bpl.n	800222c <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002216:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	2200      	movs	r2, #0
 800221e:	462b      	mov	r3, r5
 8002220:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002224:	4620      	mov	r0, r4
 8002226:	f7ff ff5f 	bl	80020e8 <UART_WaitOnFlagUntilTimeout>
 800222a:	b9a0      	cbnz	r0, 8002256 <UART_CheckIdleState+0x5e>
  huart->gState= HAL_UART_STATE_READY;
 800222c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800222e:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002230:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8002234:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 8002238:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 800223c:	e00c      	b.n	8002258 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800223e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	4632      	mov	r2, r6
 8002246:	4603      	mov	r3, r0
 8002248:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800224c:	4620      	mov	r0, r4
 800224e:	f7ff ff4b 	bl	80020e8 <UART_WaitOnFlagUntilTimeout>
 8002252:	2800      	cmp	r0, #0
 8002254:	d0db      	beq.n	800220e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002256:	2003      	movs	r0, #3
}
 8002258:	b002      	add	sp, #8
 800225a:	bd70      	pop	{r4, r5, r6, pc}

0800225c <HAL_UART_Init>:
{
 800225c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800225e:	4604      	mov	r4, r0
 8002260:	b360      	cbz	r0, 80022bc <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002262:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002266:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800226a:	b91b      	cbnz	r3, 8002274 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800226c:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002270:	f000 fb5c 	bl	800292c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002274:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002276:	2324      	movs	r3, #36	; 0x24
 8002278:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 800227c:	6813      	ldr	r3, [r2, #0]
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002284:	4620      	mov	r0, r4
 8002286:	f7ff fd43 	bl	8001d10 <UART_SetConfig>
 800228a:	2801      	cmp	r0, #1
 800228c:	d016      	beq.n	80022bc <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800228e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002290:	b113      	cbz	r3, 8002298 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002292:	4620      	mov	r0, r4
 8002294:	f7ff fed4 	bl	8002040 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002298:	6823      	ldr	r3, [r4, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022a8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80022b0:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80022b2:	601a      	str	r2, [r3, #0]
}
 80022b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80022b8:	f7ff bf9e 	b.w	80021f8 <UART_CheckIdleState>
}
 80022bc:	2001      	movs	r0, #1
 80022be:	bd10      	pop	{r4, pc}

080022c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80022c0:	4770      	bx	lr
	...

080022c4 <log>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void log(char* str)
{
 80022c4:	b510      	push	{r4, lr}
 80022c6:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart2, str, strlen(str), 1000);
 80022c8:	f7fd ff7e 	bl	80001c8 <strlen>
 80022cc:	4621      	mov	r1, r4
 80022ce:	b282      	uxth	r2, r0
 80022d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <log+0x1c>)
}
 80022d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart2, str, strlen(str), 1000);
 80022da:	f7ff bf36 	b.w	800214a <HAL_UART_Transmit>
 80022de:	bf00      	nop
 80022e0:	20000168 	.word	0x20000168

080022e4 <logInt>:

void logInt(uint8_t * i)
{
	HAL_UART_Transmit(&huart2, i, 1, 1000);
 80022e4:	4601      	mov	r1, r0
 80022e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ea:	2201      	movs	r2, #1
 80022ec:	4801      	ldr	r0, [pc, #4]	; (80022f4 <logInt+0x10>)
 80022ee:	f7ff bf2c 	b.w	800214a <HAL_UART_Transmit>
 80022f2:	bf00      	nop
 80022f4:	20000168 	.word	0x20000168

080022f8 <FCU_Transmit>:
    HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);

}

void FCU_Transmit(GPIO_TypeDef * CS_port, int CS_pin, uint8_t reg, uint8_t data)
{
 80022f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_RESET);
 80022fa:	b28c      	uxth	r4, r1
	HAL_SPI_Transmit(&hspi3, &reg , 1, 1000);
 80022fc:	4d10      	ldr	r5, [pc, #64]	; (8002340 <FCU_Transmit+0x48>)
{
 80022fe:	f88d 2007 	strb.w	r2, [sp, #7]
	HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_RESET);
 8002302:	4621      	mov	r1, r4
 8002304:	2200      	movs	r2, #0
{
 8002306:	4606      	mov	r6, r0
 8002308:	f88d 3006 	strb.w	r3, [sp, #6]
	HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_RESET);
 800230c:	f7fe faa8 	bl	8000860 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &reg , 1, 1000);
 8002310:	f10d 0107 	add.w	r1, sp, #7
 8002314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002318:	2201      	movs	r2, #1
 800231a:	4628      	mov	r0, r5
 800231c:	f7ff fa61 	bl	80017e2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data , 1, 1000);
 8002320:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002324:	f10d 0106 	add.w	r1, sp, #6
 8002328:	2201      	movs	r2, #1
 800232a:	4628      	mov	r0, r5
 800232c:	f7ff fa59 	bl	80017e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_SET);
 8002330:	2201      	movs	r2, #1
 8002332:	4621      	mov	r1, r4
 8002334:	4630      	mov	r0, r6
 8002336:	f7fe fa93 	bl	8000860 <HAL_GPIO_WritePin>
}
 800233a:	b002      	add	sp, #8
 800233c:	bd70      	pop	{r4, r5, r6, pc}
 800233e:	bf00      	nop
 8002340:	2000002c 	.word	0x2000002c

08002344 <FCU_TransmitSW>:

void FCU_TransmitSW(uint8_t addr, uint8_t reg, uint8_t data)
{
 8002344:	b537      	push	{r0, r1, r2, r4, r5, lr}
	HAL_GPIO_WritePin(NSS_Switch_GPIO_Port, NSS_Switch_Pin, GPIO_PIN_RESET);
 8002346:	4d17      	ldr	r5, [pc, #92]	; (80023a4 <FCU_TransmitSW+0x60>)
{
 8002348:	f88d 1007 	strb.w	r1, [sp, #7]
 800234c:	4604      	mov	r4, r0
 800234e:	f88d 2006 	strb.w	r2, [sp, #6]
	HAL_GPIO_WritePin(NSS_Switch_GPIO_Port, NSS_Switch_Pin, GPIO_PIN_RESET);
 8002352:	4628      	mov	r0, r5
 8002354:	2200      	movs	r2, #0
 8002356:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800235a:	f7fe fa81 	bl	8000860 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, OPCODEW | (addr << 1) , 1, 1000);
 800235e:	0061      	lsls	r1, r4, #1
 8002360:	4c11      	ldr	r4, [pc, #68]	; (80023a8 <FCU_TransmitSW+0x64>)
 8002362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002366:	2201      	movs	r2, #1
 8002368:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800236c:	4620      	mov	r0, r4
 800236e:	f7ff fa38 	bl	80017e2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &reg , 1, 1000);
 8002372:	f10d 0107 	add.w	r1, sp, #7
 8002376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800237a:	2201      	movs	r2, #1
 800237c:	4620      	mov	r0, r4
 800237e:	f7ff fa30 	bl	80017e2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data , 1, 1000);
 8002382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002386:	f10d 0106 	add.w	r1, sp, #6
 800238a:	2201      	movs	r2, #1
 800238c:	4620      	mov	r0, r4
 800238e:	f7ff fa28 	bl	80017e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NSS_Switch_GPIO_Port, NSS_Switch_Pin, GPIO_PIN_SET);
 8002392:	2201      	movs	r2, #1
 8002394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002398:	4628      	mov	r0, r5
 800239a:	f7fe fa61 	bl	8000860 <HAL_GPIO_WritePin>
}
 800239e:	b003      	add	sp, #12
 80023a0:	bd30      	pop	{r4, r5, pc}
 80023a2:	bf00      	nop
 80023a4:	48000400 	.word	0x48000400
 80023a8:	2000002c 	.word	0x2000002c

080023ac <FCU_ReceiveSW>:

uint8_t FCU_ReceiveSW(uint8_t addr, uint8_t reg, uint8_t data)
{
 80023ac:	b530      	push	{r4, r5, lr}
	uint8_t value = 0;
	HAL_GPIO_WritePin(NSS_Switch_GPIO_Port, NSS_Switch_Pin, GPIO_PIN_RESET);
 80023ae:	4d1b      	ldr	r5, [pc, #108]	; (800241c <FCU_ReceiveSW+0x70>)
{
 80023b0:	b087      	sub	sp, #28
 80023b2:	4604      	mov	r4, r0
 80023b4:	f88d 100f 	strb.w	r1, [sp, #15]
 80023b8:	f88d 200e 	strb.w	r2, [sp, #14]
	HAL_GPIO_WritePin(NSS_Switch_GPIO_Port, NSS_Switch_Pin, GPIO_PIN_RESET);
 80023bc:	4628      	mov	r0, r5
	uint8_t value = 0;
 80023be:	2200      	movs	r2, #0
	HAL_GPIO_WritePin(NSS_Switch_GPIO_Port, NSS_Switch_Pin, GPIO_PIN_RESET);
 80023c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
	uint8_t value = 0;
 80023c4:	f88d 2017 	strb.w	r2, [sp, #23]
	HAL_GPIO_WritePin(NSS_Switch_GPIO_Port, NSS_Switch_Pin, GPIO_PIN_RESET);
 80023c8:	f7fe fa4a 	bl	8000860 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, OPCODER | (addr <<  1) , 1, 1000);
 80023cc:	0061      	lsls	r1, r4, #1
 80023ce:	4c14      	ldr	r4, [pc, #80]	; (8002420 <FCU_ReceiveSW+0x74>)
 80023d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d4:	2201      	movs	r2, #1
 80023d6:	f041 0141 	orr.w	r1, r1, #65	; 0x41
 80023da:	4620      	mov	r0, r4
 80023dc:	f7ff fa01 	bl	80017e2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &reg , 1, 1000);
 80023e0:	f10d 010f 	add.w	r1, sp, #15
 80023e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e8:	2201      	movs	r2, #1
 80023ea:	4620      	mov	r0, r4
 80023ec:	f7ff f9f9 	bl	80017e2 <HAL_SPI_Transmit>
	HAL_SPI_TransmitReceive(&hspi3, &data , &value, 1, 1000);
 80023f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	f10d 0217 	add.w	r2, sp, #23
 80023fa:	2301      	movs	r3, #1
 80023fc:	f10d 010e 	add.w	r1, sp, #14
 8002400:	4620      	mov	r0, r4
 8002402:	f7ff faac 	bl	800195e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NSS_Switch_GPIO_Port, NSS_Switch_Pin, GPIO_PIN_SET);
 8002406:	4628      	mov	r0, r5
 8002408:	2201      	movs	r2, #1
 800240a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800240e:	f7fe fa27 	bl	8000860 <HAL_GPIO_WritePin>
	return value;
}
 8002412:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002416:	b007      	add	sp, #28
 8002418:	bd30      	pop	{r4, r5, pc}
 800241a:	bf00      	nop
 800241c:	48000400 	.word	0x48000400
 8002420:	2000002c 	.word	0x2000002c

08002424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002424:	b510      	push	{r4, lr}
 8002426:	b0b8      	sub	sp, #224	; 0xe0
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800242c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800242e:	2310      	movs	r3, #16
 8002430:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002432:	230a      	movs	r3, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002434:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002436:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002438:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800243a:	2307      	movs	r3, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800243c:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800243e:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002440:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002442:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002444:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002446:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002448:	f7fe faf6 	bl	8000a38 <HAL_RCC_OscConfig>
 800244c:	b100      	cbz	r0, 8002450 <SystemClock_Config+0x2c>
 800244e:	e7fe      	b.n	800244e <SystemClock_Config+0x2a>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002450:	220f      	movs	r2, #15
 8002452:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002454:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002456:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002458:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800245a:	2104      	movs	r1, #4
 800245c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800245e:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002462:	f7fe fd1b 	bl	8000e9c <HAL_RCC_ClockConfig>
 8002466:	b100      	cbz	r0, 800246a <SystemClock_Config+0x46>
 8002468:	e7fe      	b.n	8002468 <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800246a:	9025      	str	r0, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800246c:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800246e:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002470:	f7fe fefc 	bl	800126c <HAL_RCCEx_PeriphCLKConfig>
 8002474:	b100      	cbz	r0, 8002478 <SystemClock_Config+0x54>
 8002476:	e7fe      	b.n	8002476 <SystemClock_Config+0x52>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002478:	f44f 7000 	mov.w	r0, #512	; 0x200
 800247c:	f7fe f9fe 	bl	800087c <HAL_PWREx_ControlVoltageScaling>
 8002480:	4604      	mov	r4, r0
 8002482:	b100      	cbz	r0, 8002486 <SystemClock_Config+0x62>
 8002484:	e7fe      	b.n	8002484 <SystemClock_Config+0x60>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002486:	f7fe fdbf 	bl	8001008 <HAL_RCC_GetHCLKFreq>
 800248a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800248e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002492:	f7fe f8bd 	bl	8000610 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002496:	2004      	movs	r0, #4
 8002498:	f7fe f8d0 	bl	800063c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800249c:	4622      	mov	r2, r4
 800249e:	4621      	mov	r1, r4
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	f7fe f874 	bl	8000590 <HAL_NVIC_SetPriority>
}
 80024a8:	b038      	add	sp, #224	; 0xe0
 80024aa:	bd10      	pop	{r4, pc}

080024ac <main>:
{
 80024ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024b0:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 80024b2:	f7fe f82d 	bl	8000510 <HAL_Init>
  SystemClock_Config();
 80024b6:	f7ff ffb5 	bl	8002424 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ba:	4b56      	ldr	r3, [pc, #344]	; (8002614 <main+0x168>)
 80024bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024be:	f042 0204 	orr.w	r2, r2, #4
 80024c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80024c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024c6:	f002 0204 	and.w	r2, r2, #4
 80024ca:	9201      	str	r2, [sp, #4]
 80024cc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80024d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024d8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80024dc:	9202      	str	r2, [sp, #8]
 80024de:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80024e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024ea:	f002 0201 	and.w	r2, r2, #1
 80024ee:	9203      	str	r2, [sp, #12]
 80024f0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024f4:	f042 0202 	orr.w	r2, r2, #2
 80024f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80024fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|NSS_Reset_Pin, GPIO_PIN_RESET);
 8002502:	2200      	movs	r2, #0
 8002504:	21a0      	movs	r1, #160	; 0xa0
 8002506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800250a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|NSS_Reset_Pin, GPIO_PIN_RESET);
 800250c:	f7fe f9a8 	bl	8000860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Switch_Pin|NSS_BL_Pin, GPIO_PIN_SET);
 8002510:	2201      	movs	r2, #1
 8002512:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002516:	4840      	ldr	r0, [pc, #256]	; (8002618 <main+0x16c>)
 8002518:	f7fe f9a2 	bl	8000860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_AffD_GPIO_Port, NSS_AffD_Pin, GPIO_PIN_SET);
 800251c:	2201      	movs	r2, #1
 800251e:	2180      	movs	r1, #128	; 0x80
 8002520:	483e      	ldr	r0, [pc, #248]	; (800261c <main+0x170>)
 8002522:	f7fe f99d 	bl	8000860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_AffG_Pin|NSS_AffC_Pin, GPIO_PIN_SET);
 8002526:	2201      	movs	r2, #1
 8002528:	f44f 7140 	mov.w	r1, #768	; 0x300
 800252c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002530:	f7fe f996 	bl	8000860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = B1_Pin;
 800253a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800253c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800253e:	4b38      	ldr	r3, [pc, #224]	; (8002620 <main+0x174>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002540:	4836      	ldr	r0, [pc, #216]	; (800261c <main+0x170>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002542:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin : POT_INT_Pin */
  GPIO_InitStruct.Pin = POT_INT_Pin;
 8002544:	2401      	movs	r4, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002548:	f7fe f8ae 	bl	80006a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800254c:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(POT_INT_GPIO_Port, &GPIO_InitStruct);
 800254e:	a905      	add	r1, sp, #20
 8002550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002554:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = POT_INT_Pin;
 8002556:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(POT_INT_GPIO_Port, &GPIO_InitStruct);
 800255a:	f7fe f8a5 	bl	80006a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 NSS_Reset_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|NSS_Reset_Pin;
 800255e:	23a0      	movs	r3, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002560:	a905      	add	r1, sp, #20
 8002562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pins : NSS_Switch_Pin NSS_BL_Pin */
  GPIO_InitStruct.Pin = NSS_Switch_Pin|NSS_BL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002566:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = GPIO_PIN_5|NSS_Reset_Pin;
 8002568:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256e:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002570:	f7fe f89a 	bl	80006a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NSS_Switch_Pin|NSS_BL_Pin;
 8002574:	f44f 6388 	mov.w	r3, #1088	; 0x440
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002578:	a905      	add	r1, sp, #20
 800257a:	4827      	ldr	r0, [pc, #156]	; (8002618 <main+0x16c>)
  GPIO_InitStruct.Pin = NSS_Switch_Pin|NSS_BL_Pin;
 800257c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002582:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002584:	f7fe f890 	bl	80006a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_AffD_Pin */
  GPIO_InitStruct.Pin = NSS_AffD_Pin;
 8002588:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(NSS_AffD_GPIO_Port, &GPIO_InitStruct);
 800258a:	a905      	add	r1, sp, #20
 800258c:	4823      	ldr	r0, [pc, #140]	; (800261c <main+0x170>)
  GPIO_InitStruct.Pin = NSS_AffD_Pin;
 800258e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002590:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002594:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(NSS_AffD_GPIO_Port, &GPIO_InitStruct);
 8002596:	f7fe f887 	bl	80006a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_AffG_Pin NSS_AffC_Pin */
  GPIO_InitStruct.Pin = NSS_AffG_Pin|NSS_AffC_Pin;
 800259a:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = NSS_AffG_Pin|NSS_AffC_Pin;
 80025a4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025aa:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ac:	f7fe f87c 	bl	80006a8 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80025b0:	481c      	ldr	r0, [pc, #112]	; (8002624 <main+0x178>)
  huart2.Init.BaudRate = 115200;
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <main+0x17c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025b4:	6085      	str	r5, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80025b6:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
 80025ba:	e880 0088 	stmia.w	r0, {r3, r7}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025be:	270c      	movs	r7, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025c0:	60c5      	str	r5, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025c2:	6105      	str	r5, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025c4:	6147      	str	r7, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c6:	6185      	str	r5, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c8:	61c5      	str	r5, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ca:	6205      	str	r5, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025cc:	6245      	str	r5, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025ce:	f7ff fe45 	bl	800225c <HAL_UART_Init>
 80025d2:	b100      	cbz	r0, 80025d6 <main+0x12a>
 80025d4:	e7fe      	b.n	80025d4 <main+0x128>
  hspi3.Instance = SPI3;
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <main+0x180>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80025d8:	4915      	ldr	r1, [pc, #84]	; (8002630 <main+0x184>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80025da:	6098      	str	r0, [r3, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80025dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025e0:	e883 0006 	stmia.w	r3, {r1, r2}
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80025e4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80025ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80025f0:	2228      	movs	r2, #40	; 0x28
 80025f2:	61da      	str	r2, [r3, #28]
  hspi3.Init.CRCPolynomial = 7;
 80025f4:	2207      	movs	r2, #7
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025f6:	6158      	str	r0, [r3, #20]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025f8:	6218      	str	r0, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80025fa:	6258      	str	r0, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025fc:	6298      	str	r0, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002600:	6318      	str	r0, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002602:	2208      	movs	r2, #8
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002604:	4618      	mov	r0, r3
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002606:	611e      	str	r6, [r3, #16]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002608:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800260a:	f7ff f899 	bl	8001740 <HAL_SPI_Init>
 800260e:	b188      	cbz	r0, 8002634 <main+0x188>
 8002610:	e7fe      	b.n	8002610 <main+0x164>
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
 8002618:	48000400 	.word	0x48000400
 800261c:	48000800 	.word	0x48000800
 8002620:	10210000 	.word	0x10210000
 8002624:	20000168 	.word	0x20000168
 8002628:	40004400 	.word	0x40004400
 800262c:	2000002c 	.word	0x2000002c
 8002630:	40003c00 	.word	0x40003c00
  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, 0x0C, 0x01); // No shutdown
 8002634:	4623      	mov	r3, r4
 8002636:	463a      	mov	r2, r7
 8002638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800263c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002640:	f7ff fe5a 	bl	80022f8 <FCU_Transmit>
  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, 0x0B, 0x05); // Scan Limit 0-5
 8002644:	2305      	movs	r3, #5
 8002646:	220b      	movs	r2, #11
 8002648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800264c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002650:	f7ff fe52 	bl	80022f8 <FCU_Transmit>
  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, 0x09, 0x0F); // Decode Mode, digits 3-0
 8002654:	230f      	movs	r3, #15
 8002656:	2209      	movs	r2, #9
 8002658:	f44f 7180 	mov.w	r1, #256	; 0x100
 800265c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002660:	f7ff fe4a 	bl	80022f8 <FCU_Transmit>
  	  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, i, 0x88);
 8002664:	4622      	mov	r2, r4
  for(uint8_t i = 1; i < 5; i++)
 8002666:	3401      	adds	r4, #1
  	  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, i, 0x88);
 8002668:	2388      	movs	r3, #136	; 0x88
 800266a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800266e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  for(uint8_t i = 1; i < 5; i++)
 8002672:	b2e4      	uxtb	r4, r4
  	  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, i, 0x88);
 8002674:	f7ff fe40 	bl	80022f8 <FCU_Transmit>
  for(uint8_t i = 1; i < 5; i++)
 8002678:	2c05      	cmp	r4, #5
 800267a:	d1f3      	bne.n	8002664 <main+0x1b8>
  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, 5, 0xFF);
 800267c:	4622      	mov	r2, r4
 800267e:	23ff      	movs	r3, #255	; 0xff
 8002680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002688:	f7ff fe36 	bl	80022f8 <FCU_Transmit>
  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, 6, 0xFF);
 800268c:	23ff      	movs	r3, #255	; 0xff
 800268e:	2206      	movs	r2, #6
 8002690:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002698:	f7ff fe2e 	bl	80022f8 <FCU_Transmit>
 800269c:	2400      	movs	r4, #0
	  HAL_Delay(100);
 800269e:	2064      	movs	r0, #100	; 0x64
 80026a0:	f7fd ff56 	bl	8000550 <HAL_Delay>
	  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, 0x0A, i);
 80026a4:	b2e3      	uxtb	r3, r4
 80026a6:	220a      	movs	r2, #10
 80026a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b0:	3401      	adds	r4, #1
 80026b2:	f7ff fe21 	bl	80022f8 <FCU_Transmit>
  for(uint8_t i = 0; i < 15; i++)
 80026b6:	2c0f      	cmp	r4, #15
 80026b8:	d1f1      	bne.n	800269e <main+0x1f2>
	  HAL_Delay(100);
 80026ba:	2064      	movs	r0, #100	; 0x64
 80026bc:	f7fd ff48 	bl	8000550 <HAL_Delay>
  	  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, 0x0A, i);
 80026c0:	4623      	mov	r3, r4
 80026c2:	220a      	movs	r2, #10
 80026c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  for(uint8_t i = 15; i > 0; i--)
 80026cc:	3c01      	subs	r4, #1
  	  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, 0x0A, i);
 80026ce:	f7ff fe13 	bl	80022f8 <FCU_Transmit>
  for(uint8_t i = 15; i > 0; i--)
 80026d2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80026d6:	d1f0      	bne.n	80026ba <main+0x20e>
	  HAL_Delay(100);
 80026d8:	2064      	movs	r0, #100	; 0x64
 80026da:	f7fd ff39 	bl	8000550 <HAL_Delay>
	  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, 0x0A, i);
 80026de:	b2e3      	uxtb	r3, r4
 80026e0:	220a      	movs	r2, #10
 80026e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ea:	3401      	adds	r4, #1
 80026ec:	f7ff fe04 	bl	80022f8 <FCU_Transmit>
  for(uint8_t i = 0; i < 15; i++)
 80026f0:	2c0f      	cmp	r4, #15
 80026f2:	d1f1      	bne.n	80026d8 <main+0x22c>
 80026f4:	2401      	movs	r4, #1
	  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, i, 0x0F);
 80026f6:	4622      	mov	r2, r4
  for(uint8_t i = 1; i < 5; i++)
 80026f8:	3401      	adds	r4, #1
	  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, i, 0x0F);
 80026fa:	230f      	movs	r3, #15
 80026fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  for(uint8_t i = 1; i < 5; i++)
 8002704:	b2e4      	uxtb	r4, r4
	  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, i, 0x0F);
 8002706:	f7ff fdf7 	bl	80022f8 <FCU_Transmit>
  for(uint8_t i = 1; i < 5; i++)
 800270a:	2c05      	cmp	r4, #5
 800270c:	d1f3      	bne.n	80026f6 <main+0x24a>
  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, 5, 0x00);
 800270e:	2300      	movs	r3, #0
 8002710:	4622      	mov	r2, r4
 8002712:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800271a:	f7ff fded 	bl	80022f8 <FCU_Transmit>
  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, 6, 0x00);
 800271e:	2300      	movs	r3, #0
 8002720:	2206      	movs	r2, #6
 8002722:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800272a:	f7ff fde5 	bl	80022f8 <FCU_Transmit>
  HAL_Delay(1000);
 800272e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002732:	f7fd ff0d 	bl	8000550 <HAL_Delay>
	  data_receive = FCU_ReceiveSW(ad, 0x12, 0x00);
 8002736:	4f43      	ldr	r7, [pc, #268]	; (8002844 <main+0x398>)
	  log( "\nGPIOA : ");
 8002738:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8002850 <main+0x3a4>
	  log( "\n");
 800273c:	4e42      	ldr	r6, [pc, #264]	; (8002848 <main+0x39c>)
	 for (uint8_t i = 1; i < 5; i++)
 800273e:	2401      	movs	r4, #1
 8002740:	2500      	movs	r5, #0
			  HAL_Delay(200);
 8002742:	20c8      	movs	r0, #200	; 0xc8
 8002744:	f7fd ff04 	bl	8000550 <HAL_Delay>
			  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, i, j);
 8002748:	b2eb      	uxtb	r3, r5
 800274a:	4622      	mov	r2, r4
 800274c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002754:	3501      	adds	r5, #1
 8002756:	f7ff fdcf 	bl	80022f8 <FCU_Transmit>
		  for (uint8_t j = 0; j < 16; j++)
 800275a:	2d10      	cmp	r5, #16
 800275c:	d1f1      	bne.n	8002742 <main+0x296>
	 for (uint8_t i = 1; i < 5; i++)
 800275e:	3401      	adds	r4, #1
 8002760:	b2e4      	uxtb	r4, r4
 8002762:	2c05      	cmp	r4, #5
 8002764:	d1ec      	bne.n	8002740 <main+0x294>
 8002766:	2407      	movs	r4, #7
 8002768:	2501      	movs	r5, #1
		  HAL_Delay(200);
 800276a:	20c8      	movs	r0, #200	; 0xc8
 800276c:	f7fd fef0 	bl	8000550 <HAL_Delay>
		  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, 5, i);
 8002770:	462b      	mov	r3, r5
 8002772:	2205      	movs	r2, #5
 8002774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800277c:	f7ff fdbc 	bl	80022f8 <FCU_Transmit>
	  for (uint8_t i = 1; i < 65; i*=2)
 8002780:	006d      	lsls	r5, r5, #1
 8002782:	3c01      	subs	r4, #1
 8002784:	b2ed      	uxtb	r5, r5
 8002786:	d1f0      	bne.n	800276a <main+0x2be>
	  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, 5, 0);
 8002788:	4623      	mov	r3, r4
 800278a:	2205      	movs	r2, #5
 800278c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002794:	f7ff fdb0 	bl	80022f8 <FCU_Transmit>
	  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, 6, 3);
 8002798:	2303      	movs	r3, #3
 800279a:	2206      	movs	r2, #6
 800279c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a4:	f7ff fda8 	bl	80022f8 <FCU_Transmit>
	  HAL_Delay(200);
 80027a8:	20c8      	movs	r0, #200	; 0xc8
 80027aa:	f7fd fed1 	bl	8000550 <HAL_Delay>
	  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, 6, 96);
 80027ae:	2360      	movs	r3, #96	; 0x60
 80027b0:	2206      	movs	r2, #6
 80027b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ba:	f7ff fd9d 	bl	80022f8 <FCU_Transmit>
	  HAL_Delay(200);
 80027be:	20c8      	movs	r0, #200	; 0xc8
 80027c0:	f7fd fec6 	bl	8000550 <HAL_Delay>
	  FCU_Transmit(NSS_AffG_GPIO_Port, NSS_AffG_Pin, 6, 0);
 80027c4:	4623      	mov	r3, r4
 80027c6:	2206      	movs	r2, #6
 80027c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d0:	f7ff fd92 	bl	80022f8 <FCU_Transmit>
	  FCU_TransmitSW(ad, 0x0A, 0x08);
 80027d4:	4620      	mov	r0, r4
 80027d6:	2208      	movs	r2, #8
 80027d8:	210a      	movs	r1, #10
 80027da:	f7ff fdb3 	bl	8002344 <FCU_TransmitSW>
	  FCU_TransmitSW(ad, 0x00, 0xFF);
 80027de:	4621      	mov	r1, r4
 80027e0:	4620      	mov	r0, r4
 80027e2:	22ff      	movs	r2, #255	; 0xff
 80027e4:	f7ff fdae 	bl	8002344 <FCU_TransmitSW>
	  FCU_TransmitSW(ad, 0x01, 0xFF);
 80027e8:	4620      	mov	r0, r4
 80027ea:	22ff      	movs	r2, #255	; 0xff
 80027ec:	2101      	movs	r1, #1
 80027ee:	f7ff fda9 	bl	8002344 <FCU_TransmitSW>
	  FCU_TransmitSW(ad, 0x0C, 0xFF);
 80027f2:	4620      	mov	r0, r4
 80027f4:	22ff      	movs	r2, #255	; 0xff
 80027f6:	210c      	movs	r1, #12
 80027f8:	f7ff fda4 	bl	8002344 <FCU_TransmitSW>
	  FCU_TransmitSW(ad, 0x0D, 0xFF);
 80027fc:	4620      	mov	r0, r4
 80027fe:	22ff      	movs	r2, #255	; 0xff
 8002800:	210d      	movs	r1, #13
 8002802:	f7ff fd9f 	bl	8002344 <FCU_TransmitSW>
	  data_receive = FCU_ReceiveSW(ad, 0x12, 0x00);
 8002806:	4622      	mov	r2, r4
 8002808:	2112      	movs	r1, #18
 800280a:	4620      	mov	r0, r4
 800280c:	f7ff fdce 	bl	80023ac <FCU_ReceiveSW>
 8002810:	7038      	strb	r0, [r7, #0]
	  log( "\nGPIOA : ");
 8002812:	4640      	mov	r0, r8
 8002814:	f7ff fd56 	bl	80022c4 <log>
	  logInt(&data_receive);
 8002818:	480a      	ldr	r0, [pc, #40]	; (8002844 <main+0x398>)
 800281a:	f7ff fd63 	bl	80022e4 <logInt>
	  log( "\n");
 800281e:	4630      	mov	r0, r6
 8002820:	f7ff fd50 	bl	80022c4 <log>
	  data_receive = FCU_ReceiveSW(ad, 0x13, 0x00);
 8002824:	4622      	mov	r2, r4
 8002826:	2113      	movs	r1, #19
 8002828:	4620      	mov	r0, r4
 800282a:	f7ff fdbf 	bl	80023ac <FCU_ReceiveSW>
 800282e:	7038      	strb	r0, [r7, #0]
	  log( "\nGPIOB : ");
 8002830:	4806      	ldr	r0, [pc, #24]	; (800284c <main+0x3a0>)
 8002832:	f7ff fd47 	bl	80022c4 <log>
	  logInt(&data_receive);
 8002836:	4803      	ldr	r0, [pc, #12]	; (8002844 <main+0x398>)
 8002838:	f7ff fd54 	bl	80022e4 <logInt>
	  log( "\n");
 800283c:	4630      	mov	r0, r6
 800283e:	f7ff fd41 	bl	80022c4 <log>
	 for (uint8_t i = 1; i < 5; i++)
 8002842:	e77c      	b.n	800273e <main+0x292>
 8002844:	20000024 	.word	0x20000024
 8002848:	08002ab7 	.word	0x08002ab7
 800284c:	08002ab9 	.word	0x08002ab9
 8002850:	08002aad 	.word	0x08002aad

08002854 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002854:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_MspInit+0x88>)
{
 8002856:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002858:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	661a      	str	r2, [r3, #96]	; 0x60
 8002860:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002862:	f002 0201 	and.w	r2, r2, #1
 8002866:	9200      	str	r2, [sp, #0]
 8002868:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800286a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800286c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002870:	659a      	str	r2, [r3, #88]	; 0x58
 8002872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002878:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800287a:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800287c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800287e:	f7fd fe75 	bl	800056c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002882:	2200      	movs	r2, #0
 8002884:	4611      	mov	r1, r2
 8002886:	f06f 000b 	mvn.w	r0, #11
 800288a:	f7fd fe81 	bl	8000590 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	4611      	mov	r1, r2
 8002892:	f06f 000a 	mvn.w	r0, #10
 8002896:	f7fd fe7b 	bl	8000590 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	4611      	mov	r1, r2
 800289e:	f06f 0009 	mvn.w	r0, #9
 80028a2:	f7fd fe75 	bl	8000590 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	4611      	mov	r1, r2
 80028aa:	f06f 0004 	mvn.w	r0, #4
 80028ae:	f7fd fe6f 	bl	8000590 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80028b2:	2200      	movs	r2, #0
 80028b4:	4611      	mov	r1, r2
 80028b6:	f06f 0003 	mvn.w	r0, #3
 80028ba:	f7fd fe69 	bl	8000590 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	4611      	mov	r1, r2
 80028c2:	f06f 0001 	mvn.w	r0, #1
 80028c6:	f7fd fe63 	bl	8000590 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	4611      	mov	r1, r2
 80028ce:	f04f 30ff 	mov.w	r0, #4294967295
 80028d2:	f7fd fe5d 	bl	8000590 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028d6:	b003      	add	sp, #12
 80028d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80028dc:	40021000 	.word	0x40021000

080028e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI3)
 80028e2:	6802      	ldr	r2, [r0, #0]
 80028e4:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <HAL_SPI_MspInit+0x44>)
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d118      	bne.n	800291c <HAL_SPI_MspInit+0x3c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80028ea:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ee:	a901      	add	r1, sp, #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 80028f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f2:	480d      	ldr	r0, [pc, #52]	; (8002928 <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80028f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028f8:	659a      	str	r2, [r3, #88]	; 0x58
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002904:	2338      	movs	r3, #56	; 0x38
 8002906:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002910:	2303      	movs	r3, #3
 8002912:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002914:	2306      	movs	r3, #6
 8002916:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002918:	f7fd fec6 	bl	80006a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800291c:	b007      	add	sp, #28
 800291e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002922:	bf00      	nop
 8002924:	40003c00 	.word	0x40003c00
 8002928:	48000400 	.word	0x48000400

0800292c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800292c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800292e:	6802      	ldr	r2, [r0, #0]
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <HAL_UART_MspInit+0x54>)
 8002932:	429a      	cmp	r2, r3
{
 8002934:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 8002936:	d121      	bne.n	800297c <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002938:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 800293e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002940:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002944:	659a      	str	r2, [r3, #88]	; 0x58
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	9403      	str	r4, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002952:	230c      	movs	r3, #12
 8002954:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	2302      	movs	r3, #2
 8002958:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295a:	2303      	movs	r3, #3
 800295c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002960:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002966:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002968:	f7fd fe9e 	bl	80006a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800296c:	2026      	movs	r0, #38	; 0x26
 800296e:	4622      	mov	r2, r4
 8002970:	4621      	mov	r1, r4
 8002972:	f7fd fe0d 	bl	8000590 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002976:	2026      	movs	r0, #38	; 0x26
 8002978:	f7fd fe3e 	bl	80005f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800297c:	b006      	add	sp, #24
 800297e:	bd10      	pop	{r4, pc}
 8002980:	40004400 	.word	0x40004400

08002984 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002984:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002986:	f7fd fdd5 	bl	8000534 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800298a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800298e:	f7fd be62 	b.w	8000656 <HAL_SYSTICK_IRQHandler>
	...

08002994 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002994:	4801      	ldr	r0, [pc, #4]	; (800299c <USART2_IRQHandler+0x8>)
 8002996:	f7ff b915 	b.w	8001bc4 <HAL_UART_IRQHandler>
 800299a:	bf00      	nop
 800299c:	20000168 	.word	0x20000168

080029a0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029a0:	490f      	ldr	r1, [pc, #60]	; (80029e0 <SystemInit+0x40>)
 80029a2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80029a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80029ae:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <SystemInit+0x44>)
 80029b0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80029b2:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80029ba:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80029c2:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80029c6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80029c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029cc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029d4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80029d6:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80029dc:	608b      	str	r3, [r1, #8]
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00
 80029e4:	40021000 	.word	0x40021000

080029e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a20 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80029ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80029ee:	e003      	b.n	80029f8 <LoopCopyDataInit>

080029f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80029f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80029f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80029f6:	3104      	adds	r1, #4

080029f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80029f8:	480b      	ldr	r0, [pc, #44]	; (8002a28 <LoopForever+0xa>)
	ldr	r3, =_edata
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <LoopForever+0xe>)
	adds	r2, r0, r1
 80029fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80029fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002a00:	d3f6      	bcc.n	80029f0 <CopyDataInit>
	ldr	r2, =_sbss
 8002a02:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002a04:	e002      	b.n	8002a0c <LoopFillZerobss>

08002a06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002a06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a08:	f842 3b04 	str.w	r3, [r2], #4

08002a0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <LoopForever+0x16>)
	cmp	r2, r3
 8002a0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002a10:	d3f9      	bcc.n	8002a06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a12:	f7ff ffc5 	bl	80029a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a16:	f000 f811 	bl	8002a3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a1a:	f7ff fd47 	bl	80024ac <main>

08002a1e <LoopForever>:

LoopForever:
    b LoopForever
 8002a1e:	e7fe      	b.n	8002a1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a20:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002a24:	08002b1c 	.word	0x08002b1c
	ldr	r0, =_sdata
 8002a28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002a2c:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8002a30:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8002a34:	200001e0 	.word	0x200001e0

08002a38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a38:	e7fe      	b.n	8002a38 <ADC1_2_IRQHandler>
	...

08002a3c <__libc_init_array>:
 8002a3c:	b570      	push	{r4, r5, r6, lr}
 8002a3e:	4e0d      	ldr	r6, [pc, #52]	; (8002a74 <__libc_init_array+0x38>)
 8002a40:	4c0d      	ldr	r4, [pc, #52]	; (8002a78 <__libc_init_array+0x3c>)
 8002a42:	1ba4      	subs	r4, r4, r6
 8002a44:	10a4      	asrs	r4, r4, #2
 8002a46:	2500      	movs	r5, #0
 8002a48:	42a5      	cmp	r5, r4
 8002a4a:	d109      	bne.n	8002a60 <__libc_init_array+0x24>
 8002a4c:	4e0b      	ldr	r6, [pc, #44]	; (8002a7c <__libc_init_array+0x40>)
 8002a4e:	4c0c      	ldr	r4, [pc, #48]	; (8002a80 <__libc_init_array+0x44>)
 8002a50:	f000 f818 	bl	8002a84 <_init>
 8002a54:	1ba4      	subs	r4, r4, r6
 8002a56:	10a4      	asrs	r4, r4, #2
 8002a58:	2500      	movs	r5, #0
 8002a5a:	42a5      	cmp	r5, r4
 8002a5c:	d105      	bne.n	8002a6a <__libc_init_array+0x2e>
 8002a5e:	bd70      	pop	{r4, r5, r6, pc}
 8002a60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a64:	4798      	blx	r3
 8002a66:	3501      	adds	r5, #1
 8002a68:	e7ee      	b.n	8002a48 <__libc_init_array+0xc>
 8002a6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a6e:	4798      	blx	r3
 8002a70:	3501      	adds	r5, #1
 8002a72:	e7f2      	b.n	8002a5a <__libc_init_array+0x1e>
 8002a74:	08002b14 	.word	0x08002b14
 8002a78:	08002b14 	.word	0x08002b14
 8002a7c:	08002b14 	.word	0x08002b14
 8002a80:	08002b18 	.word	0x08002b18

08002a84 <_init>:
 8002a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a86:	bf00      	nop
 8002a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8a:	bc08      	pop	{r3}
 8002a8c:	469e      	mov	lr, r3
 8002a8e:	4770      	bx	lr

08002a90 <_fini>:
 8002a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a92:	bf00      	nop
 8002a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a96:	bc08      	pop	{r3}
 8002a98:	469e      	mov	lr, r3
 8002a9a:	4770      	bx	lr
